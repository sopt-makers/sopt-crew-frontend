/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/meeting/{id}/apply/status": {
    /**
     * 모임 지원자 상태 변경
     * @description 모임 지원자 상태 변경
     */
    put: operations["MeetingV0Controller_updateApplyStatusByMeeting"];
  };
  "/meeting/{id}/list": {
    /**
     * 모임 지원자/참여자 조회
     * @description 모임 지원자/참여자 조회 (모임장이면 지원자, 아니면 참여자 조회)
     */
    get: operations["MeetingV0Controller_getApplyListByMeeting"];
  };
  "/meeting/apply": {
    /**
     * 모임 지원/취소
     * @description 모임 지원/취소
     */
    post: operations["MeetingV0Controller_applyMeeting"];
  };
  "/meeting/{id}": {
    /**
     * 모임 상세 조회
     * @description 모임 상세 조회
     */
    get: operations["MeetingV0Controller_getMeetingById"];
    /**
     * 모임 수정
     * @deprecated
     * @description 모임 수정
     */
    put: operations["MeetingV0Controller_updateMeetingById"];
    /**
     * 모임 삭제
     * @description 모임 삭제
     */
    delete: operations["MeetingV0Controller_deleteMeetingById"];
  };
  "/meeting": {
    /**
     * 모임 전체 조회/검색/필터링
     * @description 모임 전체 조회/검색/필터링
     */
    get: operations["MeetingV0Controller_getAllMeeting"];
    /**
     * 모임 생성
     * @deprecated
     * @description 모임 생성
     */
    post: operations["MeetingV0Controller_createMeeting"];
  };
  "/auth": {
    /**
     * 로그인/회원가입
     * @description 로그인/회원가입
     */
    post: operations["AuthV0Controller_loginUser"];
  };
  "/meeting/v1/{id}/list/csv": {
    /**
     * 모임 지원자 목록 csv 파일 다운로드
     * @description 모임장일때만 지원자 목록 csv 파일 다운로드 가능
     */
    get: operations["MeetingV1Controller_getApplyListByMeetingCsvFileUrl"];
  };
  "/meeting/v1/presigned-url": {
    /** Meeting 썸네일 업로드용 Pre-Signed URL 발급 */
    get: operations["MeetingV1Controller_getPresignedURL"];
  };
  "/meeting/v1": {
    /**
     * 모임 생성
     * @description 모임 생성
     */
    post: operations["MeetingV1Controller_createMeeting"];
  };
  "/meeting/v1/{id}": {
    /**
     * 모임 수정
     * @description 모임 수정
     */
    put: operations["MeetingV1Controller_updateMeetingById"];
  };
  "/users/meeting": {
    /**
     * 내가 만든 모임 조회
     * @description 내가 만든 모임 조회
     */
    get: operations["UserV0Controller_getMeetingByUser"];
  };
  "/users/apply": {
    /**
     * 내가 신청한 모임 조회
     * @description 내가 신청한 모임 조회
     */
    get: operations["UserV0Controller_getApplyByUser"];
  };
  "/users/{id}": {
    /**
     * 유저 상세 조회
     * @description 유저 상세 조회
     */
    get: operations["UserV0Controller_getUserById"];
  };
  "/users/v1/profile/me": {
    /**
     * 유저 본인 프로필 조회
     * @description 유저 본인 프로필 조회
     */
    get: operations["UserV1Controller_getUserOwnProfile"];
  };
  "/": {
    get: operations["HealthController_healthCheck"];
  };
  "/notice/v1": {
    /** 공지사항 조회 */
    get: operations["NoticeV1Controller_getNotices"];
    /** 공지사항 작성 */
    post: operations["NoticeV1Controller_createNotice"];
  };
  "/post/v1/count": {
    /** 모임 게시글 개수 조회 */
    get: operations["PostV1Controller_getPostCount"];
  };
  "/post/v1": {
    /** 모임 게시글 목록 조회 */
    get: operations["PostV1Controller_getPosts"];
    /** 모임 게시글 작성 */
    post: operations["PostV1Controller_createPost"];
  };
  "/post/v1/{postId}": {
    /** 모임 게시글 조회 */
    get: operations["PostV1Controller_getMeetingPost"];
    /** 모임 게시글 수정 */
    put: operations["PostV1Controller_updatePost"];
    /** 모임 게시글 삭제 */
    delete: operations["PostV1Controller_deletePost"];
  };
  "/post/v1/{postId}/like": {
    /** 게시글 좋아요 토글 */
    post: operations["PostV1Controller_switchPostLike"];
  };
  "/post/v1/{postId}/report": {
    /** 모임 게시글 신고 */
    post: operations["PostV1Controller_createPostReport"];
  };
  "/comment/v1": {
    /** 모임 게시글 댓글 리스트 조회 */
    get: operations["CommentV1Controller_getComments"];
    /**
     * 모임 게시글 댓글 작성
     * @deprecated
     */
    post: operations["CommentV1Controller_createPostComment"];
  };
  "/comment/v1/{commentId}/like": {
    /** 댓글 좋아요 토글 */
    post: operations["CommentV1Controller_switchCommentLike"];
  };
  "/comment/v1/{commentId}/report": {
    /** 댓글 신고 */
    post: operations["CommentV1Controller_reportComment"];
  };
  "/comment/v1/{commentId}": {
    /** 모임 게시글 댓글 수정 */
    put: operations["CommentV1Controller_updatePostComment"];
    /** 모임 게시글 댓글 삭제 */
    delete: operations["CommentV1Controller_deletePostComment"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    MeetingV0UpdateStatusApplyDto: {
      /**
       * @description 지원 id
       * @example 1
       */
      applyId?: number;
      /**
       * @description 0: 대기, 1: 승인, 2: 거절
       * @example 0
       * @enum {number}
       */
      status?: 0 | 1 | 2;
    };
    CommonResponseDto: {
      /**
       * @example 200
       * @enum {number}
       */
      statusCode: 100 | 101 | 102 | 103 | 200 | 201 | 202 | 203 | 204 | 205 | 206 | 300 | 301 | 302 | 303 | 304 | 307 | 308 | 400 | 401 | 402 | 403 | 404 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 421 | 422 | 424 | 428 | 429 | 500 | 501 | 502 | 503 | 504 | 505;
      data: Record<string, never>;
    };
    Apply: {
      /** @description Primary Key */
      id: number;
      /**
       * @description 지원 타입
       * @enum {number}
       */
      type: 0 | 1;
      /** @description 지원한 모임 ID */
      meetingId: number;
      /** @description 지원한 모임 */
      meeting: components["schemas"]["Meeting"];
      /** @description 지원자 ID */
      userId: number;
      /** @description 지원자 */
      user: components["schemas"]["User"];
      /** @description 지원 동기 */
      content: string;
      /**
       * Format: date-time
       * @description 지원한 날짜
       */
      appliedDate: string;
      /**
       * @description 지원 상태
       * @enum {number}
       */
      status: 0 | 1 | 2;
    };
    Like: {
      /** @description Primary key */
      id: number;
      /**
       * Format: date-time
       * @description 좋아요 누른 날짜
       */
      createdDate: string;
      /** @description 좋아요 누른사람 */
      user: components["schemas"]["User"];
      /** @description 좋아요 누른사람 id */
      userId: number;
      /** @description 게시글 */
      post: components["schemas"]["Post"];
      /**
       * @description 게시글 id
       * - 게시글 좋아요가 아닐 경우 null
       */
      postId: number | null;
      /** @description 댓글 */
      comment: components["schemas"]["Comment"];
      /**
       * @description 댓글 id
       * - 댓글 좋아요가 아닐 경우 null
       */
      commentId: number | null;
    };
    Report: {
      /** @description Primary key */
      id: number;
      /**
       * Format: date-time
       * @description 작성일
       */
      createdDate: string;
      /** @description 신고자 */
      user: components["schemas"]["User"];
      /** @description 신고자 id */
      userId: number;
      /** @description 게시글 */
      post: components["schemas"]["Post"];
      /**
       * @description 게시글 id
       * @description 게시글 신고가 아닌 경우 null
       */
      postId: number | null;
      /** @description 댓글 */
      comment: components["schemas"]["Comment"];
      /**
       * @description 댓글 id
       * @description 댓글 신고가 아닌 경우 null
       */
      commentId: number | null;
    };
    Comment: {
      /** @description Primary key */
      id: number;
      /** @description 내용 */
      contents: string;
      /** @description 댓글 깊이 */
      depth: number;
      /** @description 댓글 순서 */
      order: number;
      /**
       * Format: date-time
       * @description 작성일
       */
      createdDate: string;
      /**
       * Format: date-time
       * @description 수정일
       */
      updatedDate: string;
      /** @description 작성자 */
      user: components["schemas"]["User"];
      /** @description 유저 id */
      userId: number;
      /** @description 게시글 */
      post: components["schemas"]["Post"];
      /** @description 게시글 id */
      postId: number;
      /** @description 좋아요 */
      likes: components["schemas"]["Like"][];
      /** @description 좋아요 수 */
      likeCount: number;
      /** @description 부모 댓글 */
      parent: components["schemas"]["Comment"];
      /** @description 부모 댓글 id */
      parentId: number | null;
      /** @description 자식 댓글 */
      children: components["schemas"]["Comment"][];
      /** @description 신고 */
      reports: components["schemas"]["Report"][];
    };
    Post: {
      /** @description Primary key */
      id: number;
      /** @description 제목 */
      title: string;
      /** @description 내용 */
      contents: string;
      /**
       * Format: date-time
       * @description 작성일
       */
      createdDate: string;
      /**
       * Format: date-time
       * @description 수정일
       */
      updatedDate: string;
      /** @description 조회수 */
      viewCount: number;
      /** @description 이미지 리스트 */
      images: string[] | null;
      /** @description 작성자 */
      user: components["schemas"]["User"];
      /** @description 유저 id */
      userId: number;
      /** @description 미팅 */
      meeting: components["schemas"]["Meeting"];
      /** @description 미팅 id */
      meetingId: number;
      /** @description 댓글 */
      comments: components["schemas"]["Comment"][];
      /** @description 댓글 수 */
      commentCount: number;
      /** @description 좋아요 */
      likes: components["schemas"]["Like"][];
      /** @description 좋아요 수 */
      likeCount: number;
      /** @description 신고 */
      reports: components["schemas"]["Report"][];
    };
    Meeting: {
      id: number;
      user: components["schemas"]["User"];
      userId: number;
      appliedInfo: components["schemas"]["Apply"][];
      title: string;
      /** @enum {string} */
      category: "스터디" | "강연" | "번개" | "행사";
      imageURL: Record<string, never>[];
      /** Format: date-time */
      startDate: string;
      /** Format: date-time */
      endDate: string;
      capacity: number;
      desc: string;
      processDesc: string;
      /** Format: date-time */
      mStartDate: string;
      /** Format: date-time */
      mEndDate: string;
      leaderDesc: string;
      targetDesc: string;
      note: string | null;
      /** @description 멘토 필요 여부 */
      isMentorNeeded: boolean;
      /** @description 활동 기수만 참여 가능한지 여부 */
      canJoinOnlyActiveGeneration: boolean;
      /**
       * @description 모임 기수
       * @description 생성 시점의 기수
       */
      createdGeneration: number;
      /**
       * @description 대상 활동 기수
       * null인 경우 모든 기수 허용
       */
      targetActiveGeneration: number | null;
      joinableParts: ("PM" | "DESIGN" | "IOS" | "ANDROID" | "SERVER" | "WEB")[];
      /** @description 게시글 리스트 */
      posts: components["schemas"]["Post"][];
    };
    User: {
      /** @description Primary Key */
      id: number;
      /** @description 사용자 이름 */
      name: string;
      /** @description sopt org unique id */
      orgId: number;
      /** @description 활동 목록 */
      activities: Record<string, never>[] | null;
      /** @description 프로필 이미지 */
      profileImage: string | null;
      /** @description 핸드폰 번호 */
      phone: string;
      /** @description 내가 생성한 모임 */
      meetings: components["schemas"]["Meeting"][];
      /** @description 내가 지원한 내역 */
      apply: components["schemas"]["Apply"][];
      /** @description 작성한 게시글 */
      posts: components["schemas"]["Post"][];
      /** @description 좋아요 */
      likes: components["schemas"]["Like"][];
      /** @description 신고 내역 */
      reports: components["schemas"]["Report"][];
    };
    MeetingV0GetApplyListByMeetingResponseApplyDto: {
      id: number;
      /** @enum {number} */
      type: 0 | 1;
      user: components["schemas"]["User"];
      /**
       * @description 신청 각오
       * - 모임장의 경우만 노출
       */
      content?: string;
      /** Format: date-time */
      appliedDate: string;
      /** @enum {number} */
      status: 0 | 1 | 2;
    };
    PageMetaDto: {
      /** @description 페이지 위치 */
      page: number;
      /** @description 가져올 데이터 개수 */
      take: number;
      /** @description 응답 데이터 개수 */
      itemCount: number;
      /** @description 총 페이지 수 */
      pageCount: number;
      /** @description 이전 페이지가 있는지 유무 */
      hasPreviousPage: boolean;
      /** @description 다음페이지가 있는지 유무 */
      hasNextPage: boolean;
    };
    MeetingV0GetApplyListByMeetingResponseDto: {
      apply: components["schemas"]["MeetingV0GetApplyListByMeetingResponseApplyDto"][];
      meta: components["schemas"]["PageMetaDto"];
    };
    MeetingV0ApplyMeetingDto: {
      /**
       * @description 모임 id
       * @example 4
       */
      id?: number;
      /**
       * @description 지원 각오
       * @example 꼭 지원하고 싶습니다
       */
      content?: string;
    };
    MeetingV0GetMeetingByIdResponseDto: {
      id: number;
      user: components["schemas"]["User"];
      userId: number;
      appliedInfo: components["schemas"]["Apply"][];
      title: string;
      /** @enum {string} */
      category: "스터디" | "강연" | "번개" | "행사";
      imageURL: Record<string, never>[];
      /** Format: date-time */
      startDate: string;
      /** Format: date-time */
      endDate: string;
      capacity: number;
      desc: string;
      processDesc: string;
      /** Format: date-time */
      mStartDate: string;
      /** Format: date-time */
      mEndDate: string;
      leaderDesc: string;
      targetDesc: string;
      note: string | null;
      /** @description 멘토 필요 여부 */
      isMentorNeeded: boolean;
      /** @description 활동 기수만 참여 가능한지 여부 */
      canJoinOnlyActiveGeneration: boolean;
      /**
       * @description 대상 활동 기수
       * null인 경우 모든 기수 허용
       */
      targetActiveGeneration: number | null;
      approvedApplyCount: number;
      createdGeneration: number;
      joinableParts: ("PM" | "DESIGN" | "IOS" | "ANDROID" | "SERVER" | "WEB")[];
      /** @enum {number} */
      status?: 0 | 1 | 2;
      host?: boolean;
      apply?: boolean;
      invite?: boolean;
      approved?: boolean;
    };
    MeetingV0GetAllMeetingResponseMeetingDto: {
      id: number;
      user: components["schemas"]["User"];
      userId: number;
      appliedInfo: components["schemas"]["Apply"][];
      title: string;
      /** @enum {string} */
      category: "스터디" | "강연" | "번개" | "행사";
      imageURL: Record<string, never>[];
      /** Format: date-time */
      startDate: string;
      /** Format: date-time */
      endDate: string;
      capacity: number;
      desc: string;
      processDesc: string;
      /** Format: date-time */
      mStartDate: string;
      /** Format: date-time */
      mEndDate: string;
      leaderDesc: string;
      targetDesc: string;
      note: string | null;
      /** @description 멘토 필요 여부 */
      isMentorNeeded: boolean;
      /** @description 활동 기수만 참여 가능한지 여부 */
      canJoinOnlyActiveGeneration: boolean;
      /**
       * @description 대상 활동 기수
       * null인 경우 모든 기수 허용
       */
      targetActiveGeneration: number | null;
      joinableParts: ("PM" | "DESIGN" | "IOS" | "ANDROID" | "SERVER" | "WEB")[];
      /** @enum {number} */
      status?: 0 | 1 | 2;
      host?: boolean;
      apply?: boolean;
      invite?: boolean;
      approved?: boolean;
    };
    MeetingV0GetAllMeetingsResponseDto: {
      meetings: components["schemas"]["MeetingV0GetAllMeetingResponseMeetingDto"][];
      meta: components["schemas"]["PageMetaDto"];
    };
    MeetingV0CreateMeetingDto: {
      /**
       * @description 모임 제목
       * @example 알고보면 쓸데있는 개발 프로세스
       */
      title: string;
      /** Format: binary */
      files: string;
      /**
       * @description 모임 카테고리
       * @example 스터디
       * @enum {string}
       */
      category: "스터디" | "강연" | "번개" | "행사";
      /**
       * Format: date-time
       * @description 모집 기간 시작 날짜
       * @example 2022.10.08
       */
      startDate: string;
      /**
       * Format: date-time
       * @description 모집 기간 끝 날짜
       * @example 2022.10.09
       */
      endDate: string;
      /**
       * @description 모집 인원
       * @example 5
       */
      capacity: number;
      /**
       * @description 모임 정보
       * @example api 가 터졌다고? 깃이 터졌다고?
       */
      desc: string;
      /**
       * @description 진행 방식 소개
       * @example 소요 시간 : 1시간 예상
       */
      processDesc: string;
      /**
       * Format: date-time
       * @description 모임 기간 첫 날짜
       * @example 2022.10.29
       */
      mStartDate: string;
      /**
       * Format: date-time
       * @description 모임 기간 날짜
       * @example 2022.10.30
       */
      mEndDate: string;
      /**
       * @description 개설자 소개
       * @example 안녕하세요 기획 파트 000입니다
       */
      leaderDesc: string;
      /**
       * @description 모집 대상
       * @example 개발 모르는 사람도 환영
       */
      targetDesc: string;
      /**
       * @description 유의 사항
       * @example 유의할 사항
       */
      note?: string | null;
      /**
       * @description 멘토 필요 여부
       * @example false
       */
      isMentorNeeded: boolean;
      /**
       * @description 활동기수만 지원 가능 여부
       * @example false
       */
      canJoinOnlyActiveGeneration: boolean;
      /**
       * @description 대상 파트 목록
       * @example [
       *   "ANDROID",
       *   "IOS"
       * ]
       */
      joinableParts: ("PM" | "DESIGN" | "IOS" | "ANDROID" | "SERVER" | "WEB")[];
    };
    MeetingV0UpdateMeetingDto: {
      /**
       * @description 모임 제목
       * @example 알고보면 쓸데있는 개발 프로세스
       */
      title: string;
      /** Format: binary */
      files: string;
      /**
       * @description 모임 카테고리
       * @example 스터디
       * @enum {string}
       */
      category: "스터디" | "강연" | "번개" | "행사";
      /**
       * Format: date-time
       * @description 모집 기간 시작 날짜
       * @example 2022.10.08
       */
      startDate: string;
      /**
       * Format: date-time
       * @description 모집 기간 끝 날짜
       * @example 2022.10.09
       */
      endDate: string;
      /**
       * @description 모집 인원
       * @example 5
       */
      capacity: number;
      /**
       * @description 모임 정보
       * @example api 가 터졌다고? 깃이 터졌다고?
       */
      desc: string;
      /**
       * @description 진행 방식 소개
       * @example 소요 시간 : 1시간 예상
       */
      processDesc: string;
      /**
       * Format: date-time
       * @description 모임 기간 첫 날짜
       * @example 2022.10.29
       */
      mStartDate: string;
      /**
       * Format: date-time
       * @description 모임 기간 끝 날짜
       * @example 2022.10.30
       */
      mEndDate: string;
      /**
       * @description 개설자 소개
       * @example 안녕하세요 기획 파트 000입니다
       */
      leaderDesc: string;
      /**
       * @description 모집 대상
       * @example 개발 모르는 사람도 환영
       */
      targetDesc: string;
      /**
       * @description 유의 사항
       * @example 유의할 사항
       */
      note: string;
      /**
       * @description 멘토 필요 여부
       * @example false
       */
      isMentorNeeded: boolean;
      /**
       * @description 활동기수만 지원 가능 여부
       * @example false
       */
      canJoinOnlyActiveGeneration: boolean;
      /**
       * @description 대상 파트 목록
       * @example [
       *   "ANDROID",
       *   "IOS"
       * ]
       */
      joinableParts: ("PM" | "DESIGN" | "IOS" | "ANDROID" | "SERVER" | "WEB")[];
    };
    AuthV0TokenDto: {
      /**
       * @description 영우의 playgroud authToken (남용하지 마시오. dev환경에서만 동작)
       * @example eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxOCIsImV4cCI6MTY3OTYwOTk3OH0.9D_Tc14J3S0VDmQgT5lUJ5i3KJZob3NKVmSS3fPjHAo
       */
      authToken: string;
    };
    MeetingV1GetApplyListByMeetingCsvFileUrlResponseDto: {
      /**
       * @description csv 파일 url
       * @example https://example.com/apply-list.csv
       */
      url?: string;
    };
    S3GetPresignedUrlResponseFieldsDto: {
      "Content-Type": string;
      key: string;
      bucket: string;
      "X-Amz-Algorithm": string;
      "X-Amz-Credential": string;
      "X-Amz-Date": string;
      Policy: string;
      "X-Amz-Signature": string;
    };
    MeetingV1GetPresignedUrlResponseDto: {
      /** @description POST 요청할 url */
      url: string;
      /** @description body에 넣을 url */
      fields: components["schemas"]["S3GetPresignedUrlResponseFieldsDto"];
    };
    MeetingV1CreateMeetingResponseDto: {
      /** @description 생성된 미팅 id */
      meetingId: number;
    };
    MeetingV1CreateMeetingBodyDto: {
      /**
       * @description 모임 제목
       * @example 알고보면 쓸데있는 개발 프로세스
       */
      title: string;
      files: string[][];
      /**
       * @description 모임 카테고리
       * @example 스터디
       * @enum {string}
       */
      category: "스터디" | "강연" | "번개" | "행사";
      /**
       * Format: date-time
       * @description 모집 기간 시작 날짜
       * @example 2022.10.08
       */
      startDate: string;
      /**
       * Format: date-time
       * @description 모집 기간 끝 날짜
       * @example 2022.10.09
       */
      endDate: string;
      /**
       * @description 모집 인원
       * @example 5
       */
      capacity: number;
      /**
       * @description 모임 정보
       * @example api 가 터졌다고? 깃이 터졌다고?
       */
      desc: string;
      /**
       * @description 진행 방식 소개
       * @example 소요 시간 : 1시간 예상
       */
      processDesc: string;
      /**
       * Format: date-time
       * @description 모임 기간 첫 날짜
       * @example 2022.10.29
       */
      mStartDate: string;
      /**
       * Format: date-time
       * @description 모임 기간 날짜
       * @example 2022.10.30
       */
      mEndDate: string;
      /**
       * @description 개설자 소개
       * @example 안녕하세요 기획 파트 000입니다
       */
      leaderDesc: string;
      /**
       * @description 모집 대상
       * @example 개발 모르는 사람도 환영
       */
      targetDesc: string;
      /**
       * @description 유의 사항
       * @example 유의할 사항
       */
      note?: string | null;
      /**
       * @description 멘토 필요 여부
       * @example false
       */
      isMentorNeeded: boolean;
      /**
       * @description 활동기수만 지원 가능 여부
       * @example false
       */
      canJoinOnlyActiveGeneration: boolean;
      /**
       * @description 대상 파트 목록
       * @example [
       *   "ANDROID",
       *   "IOS"
       * ]
       */
      joinableParts: ("PM" | "DESIGN" | "IOS" | "ANDROID" | "SERVER" | "WEB")[];
    };
    MeetingV1UpdateMeetingBodyDto: {
      /**
       * @description 모임 제목
       * @example 알고보면 쓸데있는 개발 프로세스
       */
      title: string;
      files: string[][];
      /**
       * @description 모임 카테고리
       * @example 스터디
       * @enum {string}
       */
      category: "스터디" | "강연" | "번개" | "행사";
      /**
       * Format: date-time
       * @description 모집 기간 시작 날짜
       * @example 2022.10.08
       */
      startDate: string;
      /**
       * Format: date-time
       * @description 모집 기간 끝 날짜
       * @example 2022.10.09
       */
      endDate: string;
      /**
       * @description 모집 인원
       * @example 5
       */
      capacity: number;
      /**
       * @description 모임 정보
       * @example api 가 터졌다고? 깃이 터졌다고?
       */
      desc: string;
      /**
       * @description 진행 방식 소개
       * @example 소요 시간 : 1시간 예상
       */
      processDesc: string;
      /**
       * Format: date-time
       * @description 모임 기간 첫 날짜
       * @example 2022.10.29
       */
      mStartDate: string;
      /**
       * Format: date-time
       * @description 모임 기간 날짜
       * @example 2022.10.30
       */
      mEndDate: string;
      /**
       * @description 개설자 소개
       * @example 안녕하세요 기획 파트 000입니다
       */
      leaderDesc: string;
      /**
       * @description 모집 대상
       * @example 개발 모르는 사람도 환영
       */
      targetDesc: string;
      /**
       * @description 유의 사항
       * @example 유의할 사항
       */
      note: string;
      /**
       * @description 멘토 필요 여부
       * @example false
       */
      isMentorNeeded: boolean;
      /**
       * @description 활동기수만 지원 가능 여부
       * @example false
       */
      canJoinOnlyActiveGeneration: boolean;
      /**
       * @description 대상 파트 목록
       * @example [
       *   "ANDROID",
       *   "IOS"
       * ]
       */
      joinableParts: ("PM" | "DESIGN" | "IOS" | "ANDROID" | "SERVER" | "WEB")[];
    };
    UserV0GetMeetingByUserMeetingDto: {
      id: number;
      user: components["schemas"]["User"];
      userId: number;
      appliedInfo: components["schemas"]["Apply"][];
      title: string;
      /** @enum {string} */
      category: "스터디" | "강연" | "번개" | "행사";
      imageURL: Record<string, never>[];
      /** Format: date-time */
      startDate: string;
      /** Format: date-time */
      endDate: string;
      capacity: number;
      desc: string;
      processDesc: string;
      /** Format: date-time */
      mStartDate: string;
      /** Format: date-time */
      mEndDate: string;
      leaderDesc: string;
      targetDesc: string;
      note: string | null;
      /** @description 멘토 필요 여부 */
      isMentorNeeded: boolean;
      /** @description 활동 기수만 참여 가능한지 여부 */
      canJoinOnlyActiveGeneration: boolean;
      /**
       * @description 모임 기수
       * @description 생성 시점의 기수
       */
      createdGeneration: number;
      /**
       * @description 대상 활동 기수
       * null인 경우 모든 기수 허용
       */
      targetActiveGeneration: number | null;
      joinableParts: ("PM" | "DESIGN" | "IOS" | "ANDROID" | "SERVER" | "WEB")[];
      /** @description 게시글 리스트 */
      posts: components["schemas"]["Post"][];
      /** @enum {number} */
      status: 0 | 1 | 2;
    };
    UserV0GetMeetingByUserDto: {
      meetings: components["schemas"]["UserV0GetMeetingByUserMeetingDto"][];
      count: number;
    };
    UserV0GetApplyByUserApplyMeetingDto: {
      id: number;
      user: components["schemas"]["User"];
      userId: number;
      appliedInfo: components["schemas"]["Apply"][];
      title: string;
      /** @enum {string} */
      category: "스터디" | "강연" | "번개" | "행사";
      imageURL: Record<string, never>[];
      /** Format: date-time */
      startDate: string;
      /** Format: date-time */
      endDate: string;
      capacity: number;
      desc: string;
      processDesc: string;
      /** Format: date-time */
      mStartDate: string;
      /** Format: date-time */
      mEndDate: string;
      leaderDesc: string;
      targetDesc: string;
      note: string | null;
      /** @description 멘토 필요 여부 */
      isMentorNeeded: boolean;
      /** @description 활동 기수만 참여 가능한지 여부 */
      canJoinOnlyActiveGeneration: boolean;
      /**
       * @description 모임 기수
       * @description 생성 시점의 기수
       */
      createdGeneration: number;
      /**
       * @description 대상 활동 기수
       * null인 경우 모든 기수 허용
       */
      targetActiveGeneration: number | null;
      joinableParts: ("PM" | "DESIGN" | "IOS" | "ANDROID" | "SERVER" | "WEB")[];
      /** @description 게시글 리스트 */
      posts: components["schemas"]["Post"][];
      /** @enum {number} */
      status: 0 | 1 | 2;
    };
    UserV0GetApplyByUserApplyDto: {
      /** @description Primary Key */
      id: number;
      /**
       * @description 지원 타입
       * @enum {number}
       */
      type: 0 | 1;
      /** @description 지원한 모임 ID */
      meetingId: number;
      /** @description 지원자 ID */
      userId: number;
      /** @description 지원자 */
      user: components["schemas"]["User"];
      /** @description 지원 동기 */
      content: string;
      /**
       * Format: date-time
       * @description 지원한 날짜
       */
      appliedDate: string;
      /**
       * @description 지원 상태
       * @enum {number}
       */
      status: 0 | 1 | 2;
      meeting: components["schemas"]["UserV0GetApplyByUserApplyMeetingDto"];
    };
    UserV0GetApplyByUserDto: {
      apply: components["schemas"]["UserV0GetApplyByUserApplyDto"][];
      count: number;
    };
    UserV1GetUserOwnProfileResponseDto: {
      /**
       * @description Crew ID
       * @example 1
       */
      id: number;
      /**
       * @description Playground ID
       * @example 1
       */
      orgId: number;
      /**
       * @description 유저 이름
       * @example 강영우
       */
      name: string;
      /** @description 유저 이미지 */
      profileImage: string | null;
      /** @description 유저 활동 가지고 있는지 여부, 유저 활동이 없으면 false */
      hasActivities: boolean;
    };
    NoticeV1GetNoticesResponseDto: {
      /**
       * @description primary key
       * @example 1
       */
      id: number;
      /**
       * @description 공지사항 제목
       * @example 공지사항 제목
       */
      title: string;
      /**
       * @description 공지사항 부제목
       * @example 공지사항 부제목
       */
      subTitle: string;
      /**
       * @description 공지사항 내용
       * @example 공지사항 내용
       */
      contents: string;
      /**
       * Format: date-time
       * @description 공지사항 작성일
       * @example 2021-01-01
       */
      createdDate: string;
    };
    NoticeV1CreateNoticeBodyDto: {
      /**
       * @description 공지사항 제목
       * @example 공지사항 제목
       */
      title: string;
      /**
       * @description 공지사항 부제목
       * @example 공지사항 부제목
       */
      subTitle: string;
      /**
       * @description 공지사항 내용
       * @example 공지사항 내용
       */
      contents: string;
      /**
       * Format: date-time
       * @description 공지사항 노출 시작일
       * @example 2021-01-01
       */
      exposeStartDate: string;
      /**
       * Format: date-time
       * @description 공지사항 노출 종료일
       * @example 2021-01-01
       */
      exposeEndDate: string;
    };
    PostV1GetPostCountResponseDto: {
      /** @description 모임 게시글 개수 */
      postCount: number;
    };
    PostV1GetPostsResponsePostUserDto: {
      /** @description 작성자 고유 ID */
      id: number;
      /** @description 작성자 playground 고유 ID */
      orgId: number;
      /** @description 작성자 명 */
      name: string;
      /** @description 작성자 프로필 */
      profileImage: string | null;
    };
    PostV1GetPostsResponsePostMeetingDto: {
      id: number;
      title: string;
      /** @enum {string} */
      category: "스터디" | "강연" | "번개" | "행사";
    };
    PostV1GetPostsResponsePostDto: {
      /** @description 게시글 고유 ID */
      id: number;
      /** @description 게시글 제목 */
      title: string;
      /** @description 게시글 내용 */
      contents: string;
      /**
       * Format: date-time
       * @description 게시글 게시/업데이트 일자
       */
      updatedDate: string;
      /** @description 첨부 이미지 */
      images: string[] | null;
      /** @description 작성자 정보 */
      user: components["schemas"]["PostV1GetPostsResponsePostUserDto"];
      /** @description 좋아요 수 */
      likeCount: number;
      /** @description 본인이 좋아요를 눌렀는지 여부 */
      isLiked: boolean;
      /** @description 댓글 수 */
      commentCount: number;
      /** @description 댓글 작성자 썸네일 리스트 */
      commenterThumbnails: string[];
      meeting: components["schemas"]["PostV1GetPostsResponsePostMeetingDto"];
    };
    PostV1GetPostsResponseDto: {
      /** @description 게시물 목록 */
      posts: components["schemas"]["PostV1GetPostsResponsePostDto"][];
      /** @description 페이지네이션 정보 */
      meta: components["schemas"]["PageMetaDto"];
    };
    PostV1GetPostResponseUserDto: {
      /** @description 작성자 고유 ID */
      id: number;
      /** @description 작성자 playground 고유 ID */
      orgId: number;
      /** @description 작성자 명 */
      name: string;
      /** @description 작성자 프로필 */
      profileImage: string | null;
    };
    PostV1GetPostResponseImageUrlDto: {
      id: number;
      url: string;
    };
    PostV1GetPostResponseMeetingDto: {
      /** @description 모임 고유 ID */
      id: number;
      /** @description 모임 제목 */
      title: string;
      /** @description 모임 이미지 */
      imageURL: components["schemas"]["PostV1GetPostResponseImageUrlDto"][];
      /** @description 모임 카테고리 */
      category: string;
      /** @description 모임 소개 */
      desc: string;
    };
    PostV1GetPostResponseDto: {
      /** @description 게시글 고유 ID */
      id: number;
      /** @description 게시글 제목 */
      title: string;
      /** @description 게시글 내용 */
      contents: string;
      /**
       * Format: date-time
       * @description 게시글 게시/업데이트 일자
       */
      updatedDate: string;
      /** @description 첨부 이미지 */
      images: string[] | null;
      /** @description 작성자 정보 */
      user: components["schemas"]["PostV1GetPostResponseUserDto"];
      /** @description 미팅 정보 */
      meeting: components["schemas"]["PostV1GetPostResponseMeetingDto"];
      /** @description 조회수 */
      viewCount: number;
      /** @description 좋아요 수 */
      likeCount: number;
      /** @description 본인이 좋아요를 눌렀는지 여부 */
      isLiked: boolean;
    };
    PostV1CreatePostResponseDto: {
      /** @description 생성된 게시물 id */
      postId: number;
    };
    PostV1CreatePostBodyDto: {
      /**
       * @description 모임 ID
       * @example 1
       */
      meetingId: number;
      /**
       * @description 모임 제목
       * @example 알고보면 쓸데있는 개발 프로세스
       */
      title: string;
      images: string[][];
      /**
       * @description 게시글 내용
       * @example api 가 터졌다고? 깃이 터졌다고?
       */
      contents: string;
    };
    PostV1SwitchPostLikeResponseDto: {
      /** @description 본인이 댓글 좋아요를 눌렀는지 여부 */
      isLiked: boolean;
    };
    PostV1ReportPostResponseDto: {
      /** @description 생성된 신고 id */
      reportId: number;
    };
    PostV1UpdatePostResponseDto: {
      /** @description Primary key */
      id: number;
      /** @description 제목 */
      title: string;
      /** @description 내용 */
      contents: string;
      /**
       * Format: date-time
       * @description 수정일
       */
      updatedDate: string;
      /** @description 이미지 리스트 */
      images: string[] | null;
    };
    PostV1UpdatePostBodyDto: {
      /**
       * @description 모임 제목
       * @example 알고보면 쓸데있는 개발 프로세스
       */
      title: string;
      images: string[][];
      /**
       * @description 게시글 내용
       * @example api 가 터졌다고? 깃이 터졌다고?
       */
      contents: string;
    };
    CommentV1GetCommentsResponseCommentUserDto: {
      /** @description 작성자 고유 ID */
      id: number;
      /** @description 작성자 playground 고유 ID */
      orgId: number;
      /** @description 작성자 명 */
      name: string;
      /** @description 작성자 프로필 */
      profileImage: string | null;
    };
    CommentV1GetCommentsResponseCommentDto: {
      /** @description 댓글 고유 ID */
      id: number;
      /** @description 댓글 내용 */
      contents: string;
      /** @description 댓글 작성자 정보 */
      user: components["schemas"]["CommentV1GetCommentsResponseCommentUserDto"];
      /**
       * Format: date-time
       * @description 댓글 작성/수정 일자
       */
      updatedDate: string;
      /** @description 댓글 좋아요 수 */
      likeCount: number;
      /** @description 본인이 댓글 좋아요를 눌렀는지 여부 */
      isLiked: boolean;
    };
    CommentV1GetCommentsResponseDto: {
      /** @description 댓글 목록 */
      comments: components["schemas"]["CommentV1GetCommentsResponseCommentDto"][];
      /** @description 페이지네이션 정보 */
      meta: components["schemas"]["PageMetaDto"];
    };
    CommentV1SwitchCommentLikeResponseDto: {
      /** @description 본인이 댓글 좋아요를 눌렀는지 여부 */
      isLiked: boolean;
    };
    CommentV1ReportCommentResponseDto: {
      /** @description 생성된 신고 id */
      reportId: number;
    };
    CommentV1CreateCommentResponseDto: {
      /** @description 생성된 댓글 id */
      commentId: number;
    };
    CommentV1CreateCommentBodyDto: {
      /**
       * @description 게시글 ID
       * @example 1
       */
      postId: number;
      /**
       * @description 댓글 내용
       * @example 알고보면 쓸데있는 개발 프로세스
       */
      contents: string;
    };
    CommentV1UpdateCommentBodyDto: {
      /**
       * @description 댓글 내용
       * @example 알고보면 쓸데있는 개발 프로세스
       */
      contents: string;
    };
    BaseExceptionDto: {
      message: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * 모임 지원자 상태 변경
   * @description 모임 지원자 상태 변경
   */
  MeetingV0Controller_updateApplyStatusByMeeting: {
    parameters: {
      path: {
        /** @description 모임 id */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MeetingV0UpdateStatusApplyDto"];
      };
    };
    responses: {
      200: never;
    };
  };
  /**
   * 모임 지원자/참여자 조회
   * @description 모임 지원자/참여자 조회 (모임장이면 지원자, 아니면 참여자 조회)
   */
  MeetingV0Controller_getApplyListByMeeting: {
    parameters: {
      query?: {
        /**
         * @description 각 페이지
         * @example 1
         */
        page?: number;
        /** @example 12 */
        take?: number;
        /**
         * @description 0: 대기, 1: 승인된 신청자, 2: 거절된 신청자
         * @example 0
         */
        status?: string;
        /**
         * @description 0: 지원, 1: 초대
         * @example 0
         */
        type?: string;
        /**
         * @description desc : 최신순, asc : 오래된 순
         * @example desc
         */
        date?: "desc" | "asc";
      };
      path: {
        /** @description 모임 id */
        id: number;
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json": components["schemas"]["CommonResponseDto"] & {
            data?: components["schemas"]["MeetingV0GetApplyListByMeetingResponseDto"];
          };
        };
      };
      /** @description 모임이 없습니다 */
      400: {
        content: {
          "application/json": components["schemas"]["BaseExceptionDto"];
        };
      };
    };
  };
  /**
   * 모임 지원/취소
   * @description 모임 지원/취소
   */
  MeetingV0Controller_applyMeeting: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["MeetingV0ApplyMeetingDto"];
      };
    };
    responses: {
      /** @description 지원/취소 완료 */
      201: never;
      /** @description "모임이 없습니다" or "기수/파트를 설정해주세요" or "정원이 꽉찼습니다" or "활동 기수가 아닙니다." or "지원가능 파트가 아닙니다." or "32기 스터디는 23:00부터 신청할 수 있어요." */
      400: {
        content: {
          "application/json": components["schemas"]["BaseExceptionDto"];
        };
      };
    };
  };
  /**
   * 모임 상세 조회
   * @description 모임 상세 조회
   */
  MeetingV0Controller_getMeetingById: {
    parameters: {
      path: {
        /** @description 모임 id */
        id: number;
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json": components["schemas"]["CommonResponseDto"] & {
            data?: components["schemas"]["MeetingV0GetMeetingByIdResponseDto"];
          };
        };
      };
      /** @description 모임이 없습니다 */
      400: {
        content: {
          "application/json": components["schemas"]["BaseExceptionDto"];
        };
      };
    };
  };
  /**
   * 모임 수정
   * @deprecated
   * @description 모임 수정
   */
  MeetingV0Controller_updateMeetingById: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["MeetingV0UpdateMeetingDto"];
      };
    };
    responses: {
      /** @description 수정완료 */
      200: never;
      /** @description "이미지 파일이 없습니다." or "한 개 이상의 파트를 입력해주세요" or "조건에 맞는 모임이 없습니다." */
      400: {
        content: {
          "application/json": components["schemas"]["BaseExceptionDto"];
        };
      };
    };
  };
  /**
   * 모임 삭제
   * @description 모임 삭제
   */
  MeetingV0Controller_deleteMeetingById: {
    parameters: {
      path: {
        /** @description 모임 id */
        id: number;
      };
    };
    responses: {
      /** @description 삭제완료 */
      200: never;
      /** @description 조건에 맞는 모임이 없습니다. */
      400: {
        content: {
          "application/json": components["schemas"]["BaseExceptionDto"];
        };
      };
    };
  };
  /**
   * 모임 전체 조회/검색/필터링
   * @description 모임 전체 조회/검색/필터링
   */
  MeetingV0Controller_getAllMeeting: {
    parameters: {
      query: {
        /**
         * @description 각 페이지
         * @example 1
         */
        page?: number;
        /** @example 12 */
        take?: number;
        /**
         * @description 카테고리
         * @example 스터디,번개
         */
        category?: string;
        /**
         * @description 0: 모집 전, 1: 모집 중, 2: 모집 마감
         * @example 0,1
         */
        status?: string;
        /**
         * @description 활동 기수만 보기 여부
         * @example false
         */
        isOnlyActiveGeneration: boolean;
        /**
         * @description 검색할 활동 파트 다중 선택. OR 조건으로 검색됨
         * @example PM,DESIGN,IOS,ANDROID,SERVER,WEB
         */
        joinableParts?: ("PM" | "DESIGN" | "IOS" | "ANDROID" | "SERVER" | "WEB")[];
        /**
         * @description 검색 내용
         * @example 스터디
         */
        query?: string;
        /**
         * @description 모임 기수
         * @example 32,33
         */
        createdGenerations?: string;
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json": components["schemas"]["CommonResponseDto"] & {
            data?: components["schemas"]["MeetingV0GetAllMeetingsResponseDto"];
          };
        };
      };
    };
  };
  /**
   * 모임 생성
   * @deprecated
   * @description 모임 생성
   */
  MeetingV0Controller_createMeeting: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["MeetingV0CreateMeetingDto"];
      };
    };
    responses: {
      /** @description 생성완료 */
      201: never;
      /** @description "이미지 파일이 없습니다." or "한 개 이상의 파트를 입력해주세요" or "프로필을 입력해주세요" */
      400: {
        content: {
          "application/json": components["schemas"]["BaseExceptionDto"];
        };
      };
    };
  };
  /**
   * 로그인/회원가입
   * @description 로그인/회원가입
   */
  AuthV0Controller_loginUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthV0TokenDto"];
      };
    };
    responses: {
      201: never;
      /** @description 유효하지 않은 토큰 */
      401: {
        content: {
          "application/json": components["schemas"]["BaseExceptionDto"];
        };
      };
      /** @description 로그인 서버 에러 */
      500: {
        content: {
          "application/json": components["schemas"]["BaseExceptionDto"];
        };
      };
    };
  };
  /**
   * 모임 지원자 목록 csv 파일 다운로드
   * @description 모임장일때만 지원자 목록 csv 파일 다운로드 가능
   */
  MeetingV1Controller_getApplyListByMeetingCsvFileUrl: {
    parameters: {
      query: {
        /**
         * @description 0: 대기, 1: 승인된 신청자, 2: 거절된 신청자
         * @example 0,1,2
         */
        status: string;
        /**
         * @description 0: 지원, 1: 초대
         * @example 0,1
         */
        type: string;
        /**
         * @description desc : 최신순, asc : 오래된 순
         * @example desc
         */
        order?: "desc" | "asc";
      };
      path: {
        /** @description 모임 id */
        id: number;
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json": components["schemas"]["CommonResponseDto"] & {
            data?: components["schemas"]["MeetingV1GetApplyListByMeetingCsvFileUrlResponseDto"];
          };
        };
      };
      /** @description "모임이 없습니다." or "권한이 없습니다." */
      400: {
        content: {
          "application/json": components["schemas"]["BaseExceptionDto"];
        };
      };
    };
  };
  /** Meeting 썸네일 업로드용 Pre-Signed URL 발급 */
  MeetingV1Controller_getPresignedURL: {
    parameters: {
      query: {
        /**
         * @description 파일 확장자
         * @example jpg
         */
        contentType: "jpg" | "jpeg" | "png" | "csv";
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json": components["schemas"]["CommonResponseDto"] & {
            data?: components["schemas"]["MeetingV1GetPresignedUrlResponseDto"];
          };
        };
      };
      /** @description 발급 실패 */
      500: {
        content: {
          "application/json": components["schemas"]["BaseExceptionDto"];
        };
      };
    };
  };
  /**
   * 모임 생성
   * @description 모임 생성
   */
  MeetingV1Controller_createMeeting: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["MeetingV1CreateMeetingBodyDto"];
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json": components["schemas"]["CommonResponseDto"] & {
            data?: components["schemas"]["MeetingV1CreateMeetingResponseDto"];
          };
        };
      };
      201: {
        content: {
          "application/json": components["schemas"]["MeetingV1CreateMeetingResponseDto"];
        };
      };
      /** @description "이미지 파일이 없습니다." or "한 개 이상의 파트를 입력해주세요" or "프로필을 입력해주세요" */
      400: {
        content: {
          "application/json": components["schemas"]["BaseExceptionDto"];
        };
      };
    };
  };
  /**
   * 모임 수정
   * @description 모임 수정
   */
  MeetingV1Controller_updateMeetingById: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MeetingV1UpdateMeetingBodyDto"];
      };
    };
    responses: {
      200: never;
      /** @description "이미지 파일이 없습니다." or "한 개 이상의 파트를 입력해주세요" or "조건에 맞는 모임이 없습니다." */
      400: {
        content: {
          "application/json": components["schemas"]["BaseExceptionDto"];
        };
      };
    };
  };
  /**
   * 내가 만든 모임 조회
   * @description 내가 만든 모임 조회
   */
  UserV0Controller_getMeetingByUser: {
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json": components["schemas"]["CommonResponseDto"] & {
            data?: components["schemas"]["UserV0GetMeetingByUserDto"];
          };
        };
      };
    };
  };
  /**
   * 내가 신청한 모임 조회
   * @description 내가 신청한 모임 조회
   */
  UserV0Controller_getApplyByUser: {
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json": components["schemas"]["CommonResponseDto"] & {
            data?: components["schemas"]["UserV0GetApplyByUserDto"];
          };
        };
      };
    };
  };
  /**
   * 유저 상세 조회
   * @description 유저 상세 조회
   */
  UserV0Controller_getUserById: {
    parameters: {
      path: {
        /** @description 유저 id */
        id: number;
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json": components["schemas"]["CommonResponseDto"] & {
            data?: components["schemas"]["User"];
          };
        };
      };
    };
  };
  /**
   * 유저 본인 프로필 조회
   * @description 유저 본인 프로필 조회
   */
  UserV1Controller_getUserOwnProfile: {
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json": components["schemas"]["CommonResponseDto"] & {
            data?: components["schemas"]["UserV1GetUserOwnProfileResponseDto"];
          };
        };
      };
    };
  };
  HealthController_healthCheck: {
    responses: {
      /** @description The Health Check is successful */
      200: {
        content: {
          "application/json": {
            /** @example ok */
            status?: string;
            /**
             * @example {
             *   "database": {
             *     "status": "up"
             *   }
             * }
             */
            info?: ({
              [key: string]: {
                status: string;
                [key: string]: unknown;
              } | undefined;
            }) | null;
            /** @example {} */
            error?: ({
              [key: string]: {
                status: string;
                [key: string]: unknown;
              } | undefined;
            }) | null;
            /**
             * @example {
             *   "database": {
             *     "status": "up"
             *   }
             * }
             */
            details?: {
              [key: string]: {
                status: string;
                [key: string]: unknown;
              } | undefined;
            };
          };
        };
      };
      /** @description The Health Check is not successful */
      503: {
        content: {
          "application/json": {
            /** @example error */
            status?: string;
            /**
             * @example {
             *   "database": {
             *     "status": "up"
             *   }
             * }
             */
            info?: ({
              [key: string]: {
                status: string;
                [key: string]: unknown;
              } | undefined;
            }) | null;
            /**
             * @example {
             *   "redis": {
             *     "status": "down",
             *     "message": "Could not connect"
             *   }
             * }
             */
            error?: ({
              [key: string]: {
                status: string;
                [key: string]: unknown;
              } | undefined;
            }) | null;
            /**
             * @example {
             *   "database": {
             *     "status": "up"
             *   },
             *   "redis": {
             *     "status": "down",
             *     "message": "Could not connect"
             *   }
             * }
             */
            details?: {
              [key: string]: {
                status: string;
                [key: string]: unknown;
              } | undefined;
            };
          };
        };
      };
    };
  };
  /** 공지사항 조회 */
  NoticeV1Controller_getNotices: {
    parameters: {
      query: {
        /**
         * @description 공지사항 상태
         * @example EXPOSING
         */
        status: "EXPOSING";
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json": components["schemas"]["CommonResponseDto"] & {
            data?: components["schemas"]["NoticeV1GetNoticesResponseDto"];
          };
        };
      };
    };
  };
  /** 공지사항 작성 */
  NoticeV1Controller_createNotice: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NoticeV1CreateNoticeBodyDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": number;
        };
      };
    };
  };
  /** 모임 게시글 개수 조회 */
  PostV1Controller_getPostCount: {
    parameters: {
      query: {
        /** @description 모임 id */
        meetingId: number;
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json": components["schemas"]["CommonResponseDto"] & {
            data?: components["schemas"]["PostV1GetPostCountResponseDto"];
          };
        };
      };
      /** @description "모임이 없습니다." or "권한이 없습니다." */
      400: {
        content: {
          "application/json": components["schemas"]["BaseExceptionDto"];
        };
      };
    };
  };
  /** 모임 게시글 목록 조회 */
  PostV1Controller_getPosts: {
    parameters: {
      query?: {
        /**
         * @description 각 페이지
         * @example 1
         */
        page?: number;
        /** @example 12 */
        take?: number;
        /** @description 모임 id */
        meetingId?: number | null;
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json": components["schemas"]["CommonResponseDto"] & {
            data?: components["schemas"]["PostV1GetPostsResponseDto"];
          };
        };
      };
      /** @description "모임이 없습니다." or "권한이 없습니다." */
      400: {
        content: {
          "application/json": components["schemas"]["BaseExceptionDto"];
        };
      };
    };
  };
  /** 모임 게시글 작성 */
  PostV1Controller_createPost: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PostV1CreatePostBodyDto"];
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json": components["schemas"]["CommonResponseDto"] & {
            data?: components["schemas"]["PostV1CreatePostResponseDto"];
          };
        };
      };
      201: {
        content: {
          "application/json": components["schemas"]["PostV1CreatePostResponseDto"];
        };
      };
      /** @description 모임이 없습니다. */
      400: {
        content: {
          "application/json": components["schemas"]["BaseExceptionDto"];
        };
      };
    };
  };
  /** 모임 게시글 조회 */
  PostV1Controller_getMeetingPost: {
    parameters: {
      path: {
        postId: number;
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json": components["schemas"]["CommonResponseDto"] & {
            data?: components["schemas"]["PostV1GetPostResponseDto"];
          };
        };
      };
      /** @description "모임이 없습니다." or "권한이 없습니다." */
      400: {
        content: {
          "application/json": components["schemas"]["BaseExceptionDto"];
        };
      };
    };
  };
  /** 모임 게시글 수정 */
  PostV1Controller_updatePost: {
    parameters: {
      path: {
        /**
         * @description 게시글 ID
         * @example 1
         */
        postId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PostV1UpdatePostBodyDto"];
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json": components["schemas"]["CommonResponseDto"] & {
            data?: components["schemas"]["PostV1UpdatePostResponseDto"];
          };
        };
      };
      /** @description "게시글이 없습니다." or "권한이 없습니다." or "이미지는 최대 10개까지만 업로드 가능합니다." */
      400: {
        content: {
          "application/json": components["schemas"]["BaseExceptionDto"];
        };
      };
    };
  };
  /** 모임 게시글 삭제 */
  PostV1Controller_deletePost: {
    parameters: {
      path: {
        /**
         * @description 게시글 ID
         * @example 1
         */
        postId: number;
      };
    };
    responses: {
      200: never;
    };
  };
  /** 게시글 좋아요 토글 */
  PostV1Controller_switchPostLike: {
    parameters: {
      path: {
        /**
         * @description 게시글 ID
         * @example 1
         */
        postId: number;
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json": components["schemas"]["CommonResponseDto"] & {
            data?: components["schemas"]["PostV1SwitchPostLikeResponseDto"];
          };
        };
      };
      201: {
        content: {
          "application/json": components["schemas"]["PostV1SwitchPostLikeResponseDto"];
        };
      };
    };
  };
  /** 모임 게시글 신고 */
  PostV1Controller_createPostReport: {
    parameters: {
      path: {
        /**
         * @description 게시글 ID
         * @example 1
         */
        postId: number;
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json": components["schemas"]["CommonResponseDto"] & {
            data?: components["schemas"]["PostV1ReportPostResponseDto"];
          };
        };
      };
      201: {
        content: {
          "application/json": components["schemas"]["PostV1ReportPostResponseDto"];
        };
      };
      /** @description "모임이 없습니다." or "권한이 없습니다." */
      400: {
        content: {
          "application/json": components["schemas"]["BaseExceptionDto"];
        };
      };
    };
  };
  /** 모임 게시글 댓글 리스트 조회 */
  CommentV1Controller_getComments: {
    parameters: {
      query: {
        /**
         * @description 각 페이지
         * @example 1
         */
        page?: number;
        /** @example 12 */
        take?: number;
        /** @description 게시글 ID */
        postId: number;
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json": components["schemas"]["CommonResponseDto"] & {
            data?: components["schemas"]["CommentV1GetCommentsResponseDto"];
          };
        };
      };
      /** @description "모임이 없습니다." or "권한이 없습니다." */
      400: {
        content: {
          "application/json": components["schemas"]["BaseExceptionDto"];
        };
      };
    };
  };
  /**
   * 모임 게시글 댓글 작성
   * @deprecated
   */
  CommentV1Controller_createPostComment: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CommentV1CreateCommentBodyDto"];
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json": components["schemas"]["CommonResponseDto"] & {
            data?: components["schemas"]["CommentV1CreateCommentResponseDto"];
          };
        };
      };
      201: {
        content: {
          "application/json": components["schemas"]["CommentV1CreateCommentResponseDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BaseExceptionDto"];
        };
      };
    };
  };
  /** 댓글 좋아요 토글 */
  CommentV1Controller_switchCommentLike: {
    parameters: {
      path: {
        /**
         * @description 댓글 ID
         * @example 1
         */
        commentId: number;
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json": components["schemas"]["CommonResponseDto"] & {
            data?: components["schemas"]["CommentV1SwitchCommentLikeResponseDto"];
          };
        };
      };
      201: {
        content: {
          "application/json": components["schemas"]["CommentV1SwitchCommentLikeResponseDto"];
        };
      };
    };
  };
  /** 댓글 신고 */
  CommentV1Controller_reportComment: {
    parameters: {
      path: {
        /**
         * @description 댓글 ID
         * @example 1
         */
        commentId: number;
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json": components["schemas"]["CommonResponseDto"] & {
            data?: components["schemas"]["CommentV1ReportCommentResponseDto"];
          };
        };
      };
      201: {
        content: {
          "application/json": components["schemas"]["CommentV1ReportCommentResponseDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BaseExceptionDto"];
        };
      };
    };
  };
  /** 모임 게시글 댓글 수정 */
  CommentV1Controller_updatePostComment: {
    parameters: {
      path: {
        /**
         * @description 댓글 ID
         * @example 1
         */
        commentId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CommentV1UpdateCommentBodyDto"];
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json": components["schemas"]["CommonResponseDto"] & {
            data?: components["schemas"]["CommentV1CreateCommentResponseDto"];
          };
        };
      };
      /** @description "존재하지 않는 댓글입니다." or "권한이 없습니다." */
      400: {
        content: {
          "application/json": components["schemas"]["BaseExceptionDto"];
        };
      };
    };
  };
  /** 모임 게시글 댓글 삭제 */
  CommentV1Controller_deletePostComment: {
    parameters: {
      path: {
        /**
         * @description 댓글 ID
         * @example 1
         */
        commentId: number;
      };
    };
    responses: {
      200: never;
      400: {
        content: {
          "application/json": components["schemas"]["BaseExceptionDto"];
        };
      };
    };
  };
}





////////////////////////////////////////////////////////////////////////// 여기서부터 V2 type 

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/post/v2": {
    /** 모임 게시글 작성 */
    post: operations["createPost"];
  };
  "/comment/v2": {
    /** 모임 게시글 댓글 작성 */
    post: operations["createComment"];
  };
  "/user/v2/meeting/all": {
    /** 내가 속한 모임 조회 */
    get: operations["getAllMeetingByUser"];
  };
  "/meeting/v2/org-user": {
    /** 플레이그라운드 마이페이지 내 모임 정보 조회 */
    get: operations["getAllMeetingByOrgUser"];
  };
  "/meeting/v2/banner": {
    /** 모임 둘러보기 조회 */
    get: operations["getMeetingBanner"];
  };
  "/health": {
    get: operations["getHealth"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description 게시물 생성 request body dto */
    PostV2CreatePostBodyDto: {
      /**
       * Format: int32
       * @description 모임 ID
       * @example 1
       */
      meetingId: number;
      /**
       * @description 모임 제목
       * @example 알고보면 쓸데있는 개발 프로세스
       */
      title: string;
      /**
       * @description 게시글 이미지 리스트
       * @example [
       *   "https://makers-web-img.s3.ap-northeast-2.amazonaws.com/meeting/2023/04/12/7bd87736-b557-4b26-a0d5-9b09f1f1d7df"
       * ]
       */
      images: string[];
      /**
       * @description 게시글 내용
       * @example api 가 터졌다고? 깃이 터졌다고?
       */
      contents: string;
    };
    PostV2CreatePostResponseDto: {
      /** Format: int32 */
      postId?: number;
    };
    /** @description 댓글 생성 request body dto */
    CommentV2CreateCommentBodyDto: {
      /**
       * Format: int32
       * @description 게시글 ID
       * @example 1
       */
      postId: number;
      /**
       * @description 댓글 내용
       * @example 알고보면 쓸데있는 개발 프로세스
       */
      contents: string;
    };
    CommentV2CreateCommentResponseDto: {
      /** Format: int32 */
      commentId?: number;
    };
    UserV2GetAllMeetingByUserMeetingDto: {
      /** Format: int32 */
      id?: number;
      title?: string;
      contents?: string;
      imageUrl?: string;
      category?: string;
    };
    MeetingV2GetAllMeetingByOrgUserDto: {
      meetings?: components["schemas"]["MeetingV2GetAllMeetingByOrgUserMeetingDto"][];
      meta?: components["schemas"]["PageMetaDto"];
    };
    MeetingV2GetAllMeetingByOrgUserMeetingDto: {
      /** Format: int32 */
      id?: number;
      isMeetingLeader?: boolean;
      title?: string;
      imageUrl?: string;
      category?: string;
      isActiveMeeting?: boolean;
      /** Format: date-time */
      mstartDate?: string;
      /** Format: date-time */
      mendDate?: string;
    };
    PageMetaDto: {
      /**
       * Format: int32
       * @description 페이지 위치
       */
      page?: number;
      /**
       * Format: int32
       * @description 가져올 데이터 개수
       */
      take?: number;
      /**
       * Format: int32
       * @description 응답 데이터 개수
       */
      itemCount?: number;
      /**
       * Format: int32
       * @description 총 페이지 수
       */
      pageCount?: number;
      /** @description 이전 페이지가 있는지 유무 */
      hasPreviousPage?: boolean;
      /** @description 다음 페이지가 있는지 유무 */
      hasNextPage?: boolean;
    };
    ImageUrlVO: {
      /** Format: int32 */
      id?: number;
      url?: string;
    };
    MeetingV2GetMeetingBannerResponseDto: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      userId?: number;
      title?: string;
      /** @enum {string} */
      category?: "STUDY" | "LECTURE" | "LIGHTNING" | "EVENT";
      imageURL?: components["schemas"]["ImageUrlVO"][];
      /** Format: date-time */
      startDate?: string;
      /** Format: int32 */
      capacity?: number;
      /** Format: date-time */
      recentActivityDate?: string;
      /** Format: int32 */
      targetActiveGeneration?: number;
      joinableParts?: ("PM" | "DESIGN" | "IOS" | "ANDROID" | "SERVER" | "WEB")[];
      /** Format: int32 */
      applicantCount?: number;
      /** Format: int32 */
      approvedUserCount?: number;
      user?: components["schemas"]["MeetingV2GetMeetingBannerResponseUserDto"];
      /** Format: int32 */
      status?: number;
      /** Format: date-time */
      mstartDate?: string;
      /** Format: date-time */
      mendDate?: string;
    };
    MeetingV2GetMeetingBannerResponseUserDto: {
      /** Format: int32 */
      id?: number;
      name?: string;
      /** Format: int32 */
      orgId?: number;
      profileImage?: string;
    };
    HealthServiceGetHealthResponseDataDto: {
      status?: string;
      info?: components["schemas"]["HealthServiceGetHealthResponseDataInfoDto"];
      error?: components["schemas"]["HealthServiceGetHealthResponseDataInfoDto"];
      details?: components["schemas"]["HealthServiceGetHealthResponseDataInfoDto"];
    };
    /** @description services의 key는 EnHealthV1ServiceType, value는 서비스 상태 */
    HealthServiceGetHealthResponseDataInfoDto: {
      services?: {
        [key: string]: components["schemas"]["HealthServiceGetHealthResponseDataStatusDto"] | undefined;
      };
      database?: components["schemas"]["HealthServiceGetHealthResponseDataStatusDto"];
    };
    HealthServiceGetHealthResponseDataStatusDto: {
      status?: string;
    };
    HealthServiceGetHealthResponseDto: {
      /** Format: int32 */
      statusCode?: number;
      data?: components["schemas"]["HealthServiceGetHealthResponseDataDto"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /** 모임 게시글 작성 */
  createPost: {
    requestBody: {
      content: {
        "application/json;charset=UTF-8": components["schemas"]["PostV2CreatePostBodyDto"];
      };
    };
    responses: {
      /** @description 성공 */
      201: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["PostV2CreatePostResponseDto"];
        };
      };
      /** @description 모임이 없습니다. */
      400: never;
      /** @description 권한이 없습니다. */
      403: never;
    };
  };
  /** 모임 게시글 댓글 작성 */
  createComment: {
    requestBody: {
      content: {
        "application/json;charset=UTF-8": components["schemas"]["CommentV2CreateCommentBodyDto"];
      };
    };
    responses: {
      /** @description 성공 */
      201: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["CommentV2CreateCommentResponseDto"];
        };
      };
    };
  };
  /** 내가 속한 모임 조회 */
  getAllMeetingByUser: {
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["UserV2GetAllMeetingByUserMeetingDto"][];
        };
      };
      /** @description 내가 속한 모임 리스트가 없는 경우 */
      204: never;
    };
  };
  /** 플레이그라운드 마이페이지 내 모임 정보 조회 */
  getAllMeetingByOrgUser: {
    parameters: {
      query?: {
        /**
         * @description 페이지, default = 1
         * @example 1
         */
        page?: string;
        /**
         * @description 가져올 데이터 개수, default = 12
         * @example 50
         */
        take?: string;
        /**
         * @description 플레이그라운드 유저 id
         * @example 0
         */
        orgUserId?: string;
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["MeetingV2GetAllMeetingByOrgUserDto"];
        };
      };
    };
  };
  /** 모임 둘러보기 조회 */
  getMeetingBanner: {
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["MeetingV2GetMeetingBannerResponseDto"][];
        };
      };
      /** @description 모임이 없습니다. */
      204: never;
    };
  };
  getHealth: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["HealthServiceGetHealthResponseDto"];
        };
      };
    };
  };
}
