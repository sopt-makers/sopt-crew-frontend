/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/comment/v2/{commentId}": {
    /** 모임 게시글 댓글 수정 */
    put: operations["updateComment"];
    /** 모임 게시글 댓글 삭제 */
    delete: operations["deleteComment"];
  };
  "/post/v2": {
    /** 모임 게시글 목록 조회 */
    get: operations["getPosts"];
    /** 모임 게시글 작성 */
    post: operations["createPost"];
  };
  "/post/v2/mention": {
    /** 게시글에서 멘션하기 */
    post: operations["mentionUserInPost"];
  };
  "/notice/v2": {
    /** 공지사항 조회 */
    get: operations["getNotices"];
    /** 공지사항 작성 */
    post: operations["createNotice"];
  };
  "/meeting/v2": {
    /** 모임 생성 */
    post: operations["createMeeting"];
  };
  "/meeting/v2/apply": {
    /** 모임 지원 */
    post: operations["applyMeeting"];
  };
  "/comment/v2": {
    /** 모임 게시글 댓글 리스트 조회 */
    get: operations["getComments"];
    /** 모임 게시글 댓글 작성 */
    post: operations["createComment"];
  };
  "/comment/v2/{commentId}/report": {
    /** 댓글 신고하기 */
    post: operations["reportComment"];
  };
  "/comment/v2/{commentId}/like": {
    /** 모임 게시글 댓글 좋아요 토글 */
    post: operations["switchCommentLike"];
  };
  "/comment/v2/mention": {
    /** 댓글에서 유저 멘션 */
    post: operations["mentionUserInComment"];
  };
  "/user/v2/mention": {
    /** 멘션 사용자 조회 */
    get: operations["getAllMentionUser"];
  };
  "/user/v2/meeting/all": {
    /** 내가 속한 모임 조회 */
    get: operations["getAllMeetingByUser"];
  };
  "/post/v2/{postId}": {
    /** 모임 게시글 조회 */
    get: operations["getPost"];
    /** 모임 게시글 삭제 */
    delete: operations["deletePost"];
  };
  "/post/v2/count": {
    /** 모임 게시글 개수 조회 */
    get: operations["getPostCount"];
  };
  "/meeting/v2/{meetingId}/list": {
    /**
     * 모임 지원자/참여자 조회
     * @description 모임 지원자/참여자 조회 (모임장이면 지원자, 아니면 참여자 조회)
     */
    get: operations["findApplyList"];
  };
  "/meeting/v2/org-user": {
    /** 플레이그라운드 마이페이지 내 모임 정보 조회 */
    get: operations["getAllMeetingByOrgUser"];
  };
  "/meeting/v2/banner": {
    /** 모임 둘러보기 조회 */
    get: operations["getMeetingBanner"];
  };
  "/health": {
    get: operations["getHealth"];
  };
  "/health/v2": {
    get: operations["getHealthV2"];
  };
  "/comment/v2/temp": {
    /** [TEMP] 모임 게시글 댓글 리스트 조회 */
    get: operations["getCommentsTemp"];
  };
  "/advertisement/v2": {
    /**
     * 광고 조회
     * @description 게시글 목록 페이지일 경우, ?category=POST  <br /> 모임 목록 페이지일 경우, ?category=MEETING
     */
    get: operations["getAdvertisement"];
  };
  "/meeting/v2/{meetingId}/apply": {
    /** 모임 지원 취소 */
    delete: operations["applyMeetingCancel"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description 댓글 수정 request body dto */
    CommentV2UpdateCommentBodyDto: {
      /**
       * @description 댓글 내용
       * @example 알고보면 쓸데있는 개발 프로세스
       */
      contents: string;
    };
    /** @description 댓글 수정 응답 Dto */
    CommentV2UpdateCommentResponseDto: {
      /**
       * Format: int32
       * @description 수정된 댓글 id
       * @example 1
       */
      id: number;
      /**
       * @description 수정된 댓글 내용
       * @example 댓글내용입니다1
       */
      contents: string;
      /**
       * @description 수정된 시간
       * @example 2024-07-31T15:30:00
       */
      updateDate: string;
    };
    /** @description 게시물 생성 request body dto */
    PostV2CreatePostBodyDto: {
      /**
       * Format: int32
       * @description 모임 id
       * @example 1
       */
      meetingId: number;
      /**
       * @description 모임 제목
       * @example 알고보면 쓸데있는 개발 프로세스
       */
      title: string;
      /**
       * @description 게시글 이미지 리스트
       * @example [
       *   "https://makers-web-img.s3.ap-northeast-2.amazonaws.com/meeting/2023/04/12/7bd87736-b557-4b26-a0d5-9b09f1f1d7df"
       * ]
       */
      images: string[];
      /**
       * @description 게시글 내용
       * @example api 가 터졌다고? 깃이 터졌다고?
       */
      contents: string;
    };
    /** @description 게시글 생성 응답 Dto */
    PostV2CreatePostResponseDto: {
      /**
       * Format: int32
       * @description 게시글 id
       * @example 1
       */
      postId: number;
    };
    /** @description 모임 게시글에서 유저 언급 request body dto */
    PostV2MentionUserInPostRequestDto: {
      /**
       * @description 메이커스 프로덕트에서 범용적으로 사용하는 userId
       * @example [
       *   111,
       *   112,
       *   113
       * ]
       */
      orgIds: number[];
      /**
       * Format: int32
       * @description 게시글 ID
       * @example 1
       */
      postId: number;
      /**
       * @description 멘션 내용
       * @example 멘션내용~~
       */
      content: string;
    };
    NoticeV2CreateRequestDto: {
      title?: string;
      subTitle?: string;
      contents?: string;
      /** Format: date-time */
      exposeStartDate?: string;
      /** Format: date-time */
      exposeEndDate?: string;
      noticeSecretKey?: string;
    };
    /** @description 모임 생성 request body dto */
    MeetingV2CreateMeetingBodyDto: {
      /**
       * @description 모임 제목
       * @example 알고보면 쓸데있는 개발 프로세스
       */
      title: string;
      /**
       * @description 모임 이미지 리스트, 최대 6개
       * @example [
       *   "https://makers-web-img.s3.ap-northeast-2.amazonaws.com/meeting/2023/04/12/7bd87736-b557-4b26-a0d5-9b09f1f1d7df"
       * ]
       */
      files: string[];
      /**
       * @description 모임 카테고리
       * @example 스터디
       */
      category: string;
      /**
       * @description 모집 기간 시작 날짜
       * @example 2022.10.08
       */
      startDate: string;
      /**
       * @description 모집 기간 끝 날짜
       * @example 2022.10.09
       */
      endDate: string;
      /**
       * Format: int32
       * @description 모집 인원
       * @example 5
       */
      capacity: number;
      /**
       * @description 모집 정보
       * @example api 가 터졌다고? 깃이 터졌다고?
       */
      desc: string;
      /**
       * @description 진행 방식 소개
       * @example 소요 시간 : 1시간 예상
       */
      processDesc: string;
      /**
       * @description 모임 활동 시작 날짜
       * @example 2022.10.29
       */
      mStartDate: string;
      /**
       * @description 모임 활동 종료 날짜
       * @example 2022.10.30
       */
      mEndDate: string;
      /**
       * @description 개설자 소개
       * @example 안녕하세요 기획 파트 000입니다
       */
      leaderDesc: string;
      /**
       * @description 모집 대상 소개
       * @example 개발 모르는 사람도 환영
       */
      targetDesc: string;
      /**
       * @description 유의할 사항
       * @example 유의할 사항
       */
      note?: string;
      /**
       * @description 멘토 필요 여부
       * @example false
       */
      isMentorNeeded: boolean;
      /**
       * @description 활동기수만 지원 가능 여부
       * @example false
       */
      canJoinOnlyActiveGeneration: boolean;
      /**
       * @description 대상 파트 목록
       * @example [
       *   "ANDROID",
       *   "IOS"
       * ]
       */
      joinableParts: ("PM" | "DESIGN" | "IOS" | "ANDROID" | "SERVER" | "WEB")[];
    };
    /** @description 모임 생성 응답 Dto */
    MeetingV2CreateMeetingResponseDto: {
      /**
       * Format: int32
       * @description 모임 id
       * @example 1
       */
      meetingId: number;
    };
    /** @description 모임 지원 request body dto */
    MeetingV2ApplyMeetingDto: {
      /**
       * Format: int32
       * @description 모임 ID
       * @example 4
       */
      meetingId: number;
      /**
       * @description 지원 각오
       * @example 꼭 지원하고 싶습니다.
       */
      content: string;
    };
    /** @description 모임 신청 응답 Dto */
    MeetingV2ApplyMeetingResponseDto: {
      /**
       * Format: int32
       * @description 신청 id
       * @example 1
       */
      applyId: number;
    };
    /** @description 댓글 생성 request body dto */
    CommentV2CreateCommentBodyDto: {
      /**
       * Format: int32
       * @description 게시글 ID
       * @example 1
       */
      postId: number;
      /**
       * @description 댓글 내용
       * @example 알고보면 쓸데있는 개발 프로세스
       */
      contents: string;
      /**
       * @description 댓글/대댓글 여부
       * @example true
       */
      isParent: boolean;
      /**
       * Format: int32
       * @description 대댓글인 경우, 댓글의 id
       * @example 3
       */
      parentCommentId?: number;
    };
    /** @description 댓글 생성 응답 Dto */
    CommentV2CreateCommentResponseDto: {
      /**
       * Format: int32
       * @description 생성된 댓글 id
       * @example 1
       */
      commentId: number;
    };
    /** @description 댓글 신고 응답 Dto */
    CommentV2ReportCommentResponseDto: {
      /**
       * Format: int32
       * @description 신고 id
       * @example 1
       */
      reportId: number;
    };
    /** @description 댓글 좋아요 토글 응답 Dto */
    CommentV2SwitchCommentLikeResponseDto: {
      /**
       * @description 요청 후 내가 좋아요를 누른 상태
       * @example false
       */
      isLiked: boolean;
    };
    /** @description 댓글에서 유저 언급 request body dto */
    CommentV2MentionUserInCommentRequestDto: {
      /**
       * @description 메이커스 프로덕트에서 범용적으로 사용하는 userId
       * @example [
       *   111,
       *   112,
       *   113
       * ]
       */
      orgIds: number[];
      /**
       * Format: int32
       * @description 게시글 ID
       * @example 1
       */
      postId: number;
      /**
       * @description 멘션 내용
       * @example 멘션내용~~
       */
      content: string;
    };
    /** @description 멘션 유저 조회 응답 Dto */
    UserV2GetAllMentionUserDto: {
      /**
       * Format: int32
       * @description 메이커스 프로덕트에서 범용적으로 사용하는 userId
       * @example 1
       */
      orgId: number;
      /**
       * @description 유저 이름
       * @example 홍길동
       */
      userName: string;
      /**
       * @description 최근 파트
       * @example 서버
       */
      recentPart: string;
      /**
       * Format: int32
       * @description 최근 기수
       * @example 33
       */
      recentGeneration: number;
      /**
       * @description 유저 프로필 사진
       * @example [url] 형식
       */
      profileImageUrl?: string;
    };
    /** @description 내가 속한 모임 조회 응답 Dto */
    UserV2GetAllMeetingByUserMeetingDto: {
      /**
       * Format: int32
       * @description 모임 id
       * @example 1
       */
      id: number;
      /**
       * @description 모임 제목
       * @example 모임 제목입니다.
       */
      title: string;
      /**
       * @description 모임 내용
       * @example 모임 내용입니다.
       */
      contents: string;
      /**
       * @description 모임 사진
       * @example [url] 형식
       */
      imageUrl: string;
      /**
       * @description 모임 카테고리
       * @example 스터디
       */
      category: string;
    };
    /**
     * @description 모임 이미지 url
     * @example [url 형식]
     */
    ImageUrlVO: {
      /** Format: int32 */
      id?: number;
      url?: string;
    };
    PageMetaDto: {
      /**
       * Format: int32
       * @description 페이지 위치
       */
      page: number;
      /**
       * Format: int32
       * @description 가져올 데이터 개수
       */
      take: number;
      /**
       * Format: int32
       * @description 응답 데이터 개수
       */
      itemCount: number;
      /**
       * Format: int32
       * @description 총 페이지 수
       */
      pageCount: number;
      /** @description 이전 페이지가 있는지 유무 */
      hasPreviousPage: boolean;
      /** @description 다음 페이지가 있는지 유무 */
      hasNextPage: boolean;
    };
    /** @description 게시글 객체 Dto */
    PostDetailResponseDto: {
      /**
       * Format: int32
       * @description 게시글 id
       * @example 1
       */
      id: number;
      /**
       * @description 게시글 제목
       * @example 게시글 제목입니다.
       */
      title: string;
      /**
       * @description 게시글 내용
       * @example 게시글 내용입니다.
       */
      contents: string;
      /**
       * Format: date-time
       * @description 게시글 생성 일자
       */
      createdDate: string;
      /**
       * @description 게시글 이미지 목록
       * @example [
       *   "url1",
       *   "url2"
       * ]
       */
      images: string[];
      user: components["schemas"]["PostWriterInfoDto"];
      /**
       * Format: int32
       * @description 게시글 좋아요 수
       * @example 20
       */
      likeCount: number;
      /**
       * @description 게시글 좋아요 여부
       * @example true
       */
      isLiked: boolean;
      /**
       * Format: int32
       * @description 게시글 조회수
       * @example 200
       */
      viewCount: number;
      /**
       * Format: int32
       * @description 게시글 댓글 수
       * @example 30
       */
      commentCount: number;
      meeting: components["schemas"]["PostMeetingDto"];
      /**
       * @description 댓글 작성자 썸네일 목록
       * @example [
       *   "url1",
       *   "url2"
       * ]
       */
      commenterThumbnails: string[];
    };
    /** @description 게시글에 대한 모임 Dto */
    PostMeetingDto: {
      /**
       * Format: int32
       * @description 모임 id
       * @example 1
       */
      id: number;
      /**
       * @description 모임 제목
       * @example 모임 제목입니다.
       */
      title: string;
      /**
       * @description 모임 카테고리
       * @example 스터디
       */
      category: string;
      /**
       * @description 모임 이미지 url
       * @example [url 형식]
       */
      imageURL: components["schemas"]["ImageUrlVO"][];
    };
    /** @description 게시글 조회 응답 Dto */
    PostV2GetPostsResponseDto: {
      /** @description 게시글 객체 */
      posts: components["schemas"]["PostDetailResponseDto"][];
      meta: components["schemas"]["PageMetaDto"];
    };
    /** @description 게시글 작성자 Dto */
    PostWriterInfoDto: {
      /**
       * Format: int32
       * @description 작성자 id, 크루에서 사용하는 userId
       * @example 1
       */
      id: number;
      /**
       * Format: int32
       * @description 작성자 org id, 메이커스 프로덕트에서 범용적으로 사용하는 userId
       * @example 1
       */
      orgId: number;
      /**
       * @description 작성자 이름
       * @example 홍길동
       */
      name: string;
      /**
       * @description 작성자 프로필 사진
       * @example [url] 형식
       */
      profileImage: string;
    };
    /** @description 게시글 객체 Dto */
    PostDetailBaseDto: {
      /**
       * Format: int32
       * @description 게시글 id
       * @example 1
       */
      id: number;
      /**
       * @description 게시글 제목
       * @example 게시글 제목입니다.
       */
      title: string;
      /**
       * @description 게시글 내용
       * @example 게시글 내용입니다.
       */
      contents: string;
      /**
       * Format: date-time
       * @description 게시글 생성일자
       */
      createdDate: string;
      /**
       * @description 게시글 이미지
       * @example [
       *   "url1",
       *   "url2"
       * ]
       */
      images: string[];
      user: components["schemas"]["PostWriterInfoDto"];
      /**
       * Format: int32
       * @description 게시글 좋아요 갯수
       * @example 20
       */
      likeCount?: number;
      /**
       * @description 게시글 좋아요 여부
       * @example true
       */
      isLiked: boolean;
      /**
       * Format: int32
       * @description 게시글 조회수
       * @example 30
       */
      viewCount: number;
      /**
       * Format: int32
       * @description 게시글 댓글 수
       * @example 5
       */
      commentCount: number;
      meeting: components["schemas"]["PostMeetingDto"];
    };
    PostV2GetPostCountResponseDto: {
      /**
       * Format: int32
       * @description 게시글 갯수
       * @example 25
       */
      postCount: number;
    };
    NoticeV2GetResponseDto: {
      /**
       * Format: int32
       * @description 공지 id
       * @example 1
       */
      id: number;
      /**
       * @description 공지 제목
       * @example 공지 제목입니다
       */
      title: string;
      /**
       * @description 공지 부제목
       * @example 공지 부제목입니다
       */
      subTitle: string;
      /**
       * @description 공지 내용
       * @example 공지 내용입니다
       */
      contents: string;
      /**
       * Format: date-time
       * @description 공지 생성 시각
       */
      createdDate: string;
    };
    MeetingGetAppliesQueryDto: {
      /**
       * Format: int32
       * @description 각 페이지
       * @default 1
       * @example 1
       */
      page?: number;
      /**
       * Format: int32
       * @description 가져올 데이터 개수
       * @default 12
       * @example 12
       */
      take?: number;
      status?: ("WAITING" | "APPROVE" | "REJECT")[];
      date?: string;
    };
    /** @description 모임 신청자 객체 Dto */
    ApplicantDto: {
      /**
       * Format: int32
       * @description 신청자 id, 크루에서 사용하는 userId
       * @example 1
       */
      id: number;
      /**
       * @description 신청자 이름
       * @example 송민규
       */
      name: string;
      /**
       * Format: int32
       * @description 신청자 org id, 메이커스 프로덕트에서 범용적으로 사용하는 userId
       * @example 1
       */
      orgId: number;
      recentActivity: components["schemas"]["UserActivityVO"];
      /**
       * @description 신청자 프로필 사진
       * @example [url] 형식
       */
      profileImage?: string;
      /**
       * @description 신청자 핸드폰 번호
       * @example 010-1234-5678
       */
      phone?: string;
    };
    /** @description 모임 신청 객체 Dto */
    ApplyInfoDto: {
      /**
       * Format: int32
       * @description 신청 id
       * @example 1
       */
      id: number;
      /**
       * @description 전하는 말
       * @example 저 뽑아주세요.
       */
      content?: string;
      /**
       * Format: date-time
       * @description 신청 시간
       */
      appliedDate: string;
      /**
       * @description 신청 상태
       * @example 1
       * @enum {string}
       */
      status: "WAITING" | "APPROVE" | "REJECT";
      user: components["schemas"]["ApplicantDto"];
    };
    /** @description 모임 신청 목록 응답 Dto */
    MeetingGetApplyListResponseDto: {
      /** @description 신청 목록 */
      apply: components["schemas"]["ApplyInfoDto"][];
      meta: components["schemas"]["PageMetaDto"];
    };
    /**
     * @description 신청자 기수 정보
     * @example [
     *   {
     *     "part": "웹",
     *     "generation": 32
     *   }
     * ]
     */
    UserActivityVO: {
      part?: string;
      /** Format: int32 */
      generation?: number;
    };
    /** @description 모임 조회 응답 Dto */
    MeetingV2GetAllMeetingByOrgUserDto: {
      /** @description 모임 객체 목록 */
      meetings: components["schemas"]["MeetingV2GetAllMeetingByOrgUserMeetingDto"][];
      meta: components["schemas"]["PageMetaDto"];
    };
    /** @description 모임 객체 Dto */
    MeetingV2GetAllMeetingByOrgUserMeetingDto: {
      /**
       * Format: int32
       * @description 모임 id
       * @example 1
       */
      id: number;
      /**
       * @description 모임장 여부
       * @example true
       */
      isMeetingLeader: boolean;
      /**
       * @description 모임 제목
       * @example 모임 제목입니다1
       */
      title: string;
      /**
       * @description 모임 사진
       * @example [url] 형식
       */
      imageUrl: string;
      /**
       * @description 모임 분류
       * @example 스터디
       */
      category: string;
      /**
       * @description 모임 활성 여부
       * @example true
       */
      isActiveMeeting: boolean;
      /** Format: date-time */
      mstartDate?: string;
      /** Format: date-time */
      mendDate?: string;
    };
    /** @description 모임 배너 응답 Dto */
    MeetingV2GetMeetingBannerResponseDto: {
      /**
       * Format: int32
       * @description 모임 id
       * @example 1
       */
      id: number;
      /**
       * Format: int32
       * @description 크루에서 사용하는 userId
       * @example 1
       */
      userId: number;
      /**
       * @description 모임 제목
       * @example 모임 제목입니다1
       */
      title: string;
      /**
       * @description 모임 카테고리
       * @example 스터디
       * @enum {string}
       */
      category: "STUDY" | "LECTURE" | "LIGHTNING" | "EVENT" | "SEMINAR";
      /**
       * @description 모임 사진
       * @example [url] 형식
       */
      imageURL: components["schemas"]["ImageUrlVO"][];
      /**
       * Format: date-time
       * @description 모임 모집 시작일
       */
      startDate: string;
      /**
       * Format: date-time
       * @description 모임 모집 종료일
       */
      endDate: string;
      /**
       * Format: int32
       * @description 모집 인원
       * @example 20
       */
      capacity: number;
      /**
       * Format: date-time
       * @description 최근 활동 일자
       */
      recentActivityDate?: string;
      /**
       * Format: int32
       * @description 모임 타겟 기수
       * @example 33
       */
      targetActiveGeneration: number;
      /**
       * @description 모임 타겟 파트
       * @example [
       *   "PM",
       *   "SERVER"
       * ]
       */
      joinableParts: ("PM" | "DESIGN" | "IOS" | "ANDROID" | "SERVER" | "WEB")[];
      /**
       * Format: int32
       * @description 지원자 수
       * @example 50
       */
      applicantCount: number;
      /**
       * Format: int32
       * @description 가입된 지원자 수
       * @example 9
       */
      approvedUserCount: number;
      user: components["schemas"]["MeetingV2GetMeetingBannerResponseUserDto"];
      /**
       * Format: int32
       * @description 모임 상태
       * @example 1
       */
      status: number;
      /** Format: date-time */
      mstartDate?: string;
      /** Format: date-time */
      mendDate?: string;
    };
    /** @description 모임 배너 유저 Dto */
    MeetingV2GetMeetingBannerResponseUserDto: {
      /**
       * Format: int32
       * @description 모임장 id, 크루에서 사용하는 userId
       * @example 1
       */
      id: number;
      /**
       * @description 모임장 이름
       * @example 홍길동
       */
      name: string;
      /**
       * Format: int32
       * @description 모임장 org id, 메이커스 프로덕트에서 범용적으로 사용하는 userId
       * @example 1
       */
      orgId: number;
      /**
       * @description 모임장 프로필 사진
       * @example [url] 형식
       */
      profileImage?: string;
    };
    HealthServiceGetHealthResponseDataDto: {
      status?: string;
      info?: components["schemas"]["HealthServiceGetHealthResponseDataInfoDto"];
      error?: components["schemas"]["HealthServiceGetHealthResponseDataInfoDto"];
      details?: components["schemas"]["HealthServiceGetHealthResponseDataInfoDto"];
    };
    /** @description services의 key는 EnHealthV1ServiceType, value는 서비스 상태 */
    HealthServiceGetHealthResponseDataInfoDto: {
      services?: {
        [key: string]: components["schemas"]["HealthServiceGetHealthResponseDataStatusDto"] | undefined;
      };
      database?: components["schemas"]["HealthServiceGetHealthResponseDataStatusDto"];
    };
    HealthServiceGetHealthResponseDataStatusDto: {
      status?: string;
    };
    HealthServiceGetHealthResponseDto: {
      /** Format: int32 */
      statusCode?: number;
      data?: components["schemas"]["HealthServiceGetHealthResponseDataDto"];
    };
    /** @description 댓글 객체 응답 Dto */
    CommentDto: {
      /**
       * Format: int32
       * @description 댓글 id
       * @example 1
       */
      id: number;
      /**
       * @description 댓글 내용
       * @example 이것은 댓글 내용입니다.
       */
      contents: string;
      user: components["schemas"]["CommentWriterDto"];
      /**
       * Format: date-time
       * @description 댓글 생성 시점
       */
      createdDate: string;
      /**
       * Format: int32
       * @description 좋아요 갯수
       * @example 20
       */
      likeCount: number;
      /**
       * @description 댓글 좋아요 여부
       * @example true
       */
      isLiked: boolean;
      /**
       * @description 댓글 작성자 여부
       * @example true
       */
      isWriter: boolean;
      /**
       * Format: int32
       * @description 댓글 순서
       * @example 2
       */
      order: number;
      /** @description 대댓글 객체 목록 */
      replies: components["schemas"]["ReplyDto"][];
    };
    /** @description 댓글 목록 조회 응답 Dto */
    CommentV2GetCommentsResponseDto: {
      comments: components["schemas"]["CommentDto"][];
      meta: components["schemas"]["PageMetaDto"];
    };
    /** @description 댓글 작성자 객체 Dto */
    CommentWriterDto: {
      /**
       * Format: int32
       * @description 크루에서 사용하는 userId
       * @example 1
       */
      id: number;
      /**
       * Format: int32
       * @description 메이커스 프로덕트에서 범용적으로 사용하는 userId
       * @example 2
       */
      orgId: number;
      /**
       * @description 댓글 작성자 이름
       * @example 홍길동
       */
      name: string;
      /**
       * @description 댓글 작성자 프로필 사진
       * @example [url] 형식
       */
      profileImage: string;
    };
    /** @description 대댓글 객체 응답 Dto */
    ReplyDto: {
      /**
       * Format: int32
       * @description 대댓글 id
       * @example 1
       */
      id: number;
      /**
       * @description 댓글 내용
       * @example 이것은 댓글 내용입니다.
       */
      contents: string;
      user: components["schemas"]["CommentWriterDto"];
      /**
       * Format: date-time
       * @description 댓글 생성 시점
       */
      createdDate: string;
      /**
       * Format: int32
       * @description 좋아요 갯수
       * @example 20
       */
      likeCount: number;
      /**
       * @description 댓글 좋아요 여부
       * @example true
       */
      isLiked: boolean;
      /**
       * @description 댓글 작성자 여부
       * @example true
       */
      isWriter: boolean;
      /**
       * Format: int32
       * @description 댓글 순서
       * @example 2
       */
      order: number;
    };
    /** @description 임시 응답 Dto */
    TempResponseDto: {
      data: components["schemas"]["CommentV2GetCommentsResponseDto"];
    };
    /** @description 광고 구좌 조회 응답 Dto */
    AdvertisementGetResponseDto: {
      /**
       * @description 광고 구좌 이미지 url
       * @example [image Url]
       */
      advertisementImageUrl: string;
      /**
       * @description 광고 구좌 링크
       * @example https://www.naver.com
       */
      advertisementLink: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /** 모임 게시글 댓글 수정 */
  updateComment: {
    parameters: {
      path: {
        commentId: number;
      };
    };
    requestBody: {
      content: {
        "application/json;charset=UTF-8": components["schemas"]["CommentV2UpdateCommentBodyDto"];
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json": components["schemas"]["CommentV2UpdateCommentResponseDto"];
        };
      };
    };
  };
  /** 모임 게시글 댓글 삭제 */
  deleteComment: {
    parameters: {
      path: {
        commentId: number;
      };
    };
    responses: {
      /** @description 성공 */
      204: never;
    };
  };
  /** 모임 게시글 목록 조회 */
  getPosts: {
    parameters: {
      query?: {
        /**
         * @description 페이지, default = 1
         * @example 1
         */
        page?: number;
        /**
         * @description 가져올 데이터 개수, default = 12
         * @example 50
         */
        take?: number;
        /**
         * @description 모임 id
         * @example 0
         */
        meetingId?: number;
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["PostV2GetPostsResponseDto"];
        };
      };
      /** @description 모임이 없습니다. */
      400: never;
    };
  };
  /** 모임 게시글 작성 */
  createPost: {
    requestBody: {
      content: {
        "application/json;charset=UTF-8": components["schemas"]["PostV2CreatePostBodyDto"];
      };
    };
    responses: {
      /** @description 성공 */
      201: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["PostV2CreatePostResponseDto"];
        };
      };
      /** @description 모임이 없습니다. */
      400: never;
      /** @description 권한이 없습니다. */
      403: never;
    };
  };
  /** 게시글에서 멘션하기 */
  mentionUserInPost: {
    requestBody: {
      content: {
        "application/json;charset=UTF-8": components["schemas"]["PostV2MentionUserInPostRequestDto"];
      };
    };
    responses: {
      /** @description 성공 */
      200: never;
    };
  };
  /** 공지사항 조회 */
  getNotices: {
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["NoticeV2GetResponseDto"][];
        };
      };
    };
  };
  /** 공지사항 작성 */
  createNotice: {
    requestBody: {
      content: {
        "application/json;charset=UTF-8": components["schemas"]["NoticeV2CreateRequestDto"];
      };
    };
    responses: {
      /** @description 성공 */
      200: never;
    };
  };
  /** 모임 생성 */
  createMeeting: {
    requestBody: {
      content: {
        "application/json;charset=UTF-8": components["schemas"]["MeetingV2CreateMeetingBodyDto"];
      };
    };
    responses: {
      /** @description 성공 */
      201: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["MeetingV2CreateMeetingResponseDto"];
        };
      };
      /** @description "이미지 파일이 없습니다." or "한 개 이상의 파트를 입력해주세요" or "프로필을 입력해주세요" */
      400: never;
    };
  };
  /** 모임 지원 */
  applyMeeting: {
    requestBody: {
      content: {
        "application/json;charset=UTF-8": components["schemas"]["MeetingV2ApplyMeetingDto"];
      };
    };
    responses: {
      /** @description 지원 완료 */
      201: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["MeetingV2ApplyMeetingResponseDto"];
        };
      };
      /** @description "모임이 없습니다" or "기수/파트를 설정해주세요" or "정원이 꽉찼습니다" or "활동 기수가 아닙니다" or "지원 가능한 파트가 아닙니다" or "지원 가능한 기간이 아닙니다" */
      400: never;
    };
  };
  /** 모임 게시글 댓글 리스트 조회 */
  getComments: {
    parameters: {
      query?: {
        /**
         * @description 페이지, default = 1
         * @example 1
         */
        page?: number;
        /**
         * @description 가져올 데이터 개수, default = 12
         * @example 50
         */
        take?: number;
        /**
         * @description 게시글 id
         * @example 3
         */
        postId?: number;
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["CommentV2GetCommentsResponseDto"];
        };
      };
    };
  };
  /** 모임 게시글 댓글 작성 */
  createComment: {
    requestBody: {
      content: {
        "application/json;charset=UTF-8": components["schemas"]["CommentV2CreateCommentBodyDto"];
      };
    };
    responses: {
      /** @description 성공 */
      201: {
        content: {
          "application/json": components["schemas"]["CommentV2CreateCommentResponseDto"];
        };
      };
    };
  };
  /** 댓글 신고하기 */
  reportComment: {
    parameters: {
      path: {
        commentId: number;
      };
    };
    responses: {
      /** @description 성공 */
      201: {
        content: {
          "application/json": components["schemas"]["CommentV2ReportCommentResponseDto"];
        };
      };
    };
  };
  /** 모임 게시글 댓글 좋아요 토글 */
  switchCommentLike: {
    parameters: {
      path: {
        commentId: number;
      };
    };
    responses: {
      /** @description 성공 */
      201: {
        content: {
          "application/json": components["schemas"]["CommentV2SwitchCommentLikeResponseDto"];
        };
      };
    };
  };
  /** 댓글에서 유저 멘션 */
  mentionUserInComment: {
    requestBody: {
      content: {
        "application/json;charset=UTF-8": components["schemas"]["CommentV2MentionUserInCommentRequestDto"];
      };
    };
    responses: {
      /** @description 성공 */
      200: never;
    };
  };
  /** 멘션 사용자 조회 */
  getAllMentionUser: {
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["UserV2GetAllMentionUserDto"][];
        };
      };
    };
  };
  /** 내가 속한 모임 조회 */
  getAllMeetingByUser: {
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["UserV2GetAllMeetingByUserMeetingDto"][];
        };
      };
      /** @description 내가 속한 모임 리스트가 없는 경우 */
      204: never;
    };
  };
  /** 모임 게시글 조회 */
  getPost: {
    parameters: {
      path: {
        postId: number;
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["PostDetailBaseDto"];
        };
      };
      /** @description 모임이 없습니다 */
      400: never;
    };
  };
  /** 모임 게시글 삭제 */
  deletePost: {
    parameters: {
      path: {
        postId: number;
      };
    };
    responses: {
      /** @description 성공 */
      200: never;
      /** @description 모임이 없습니다. */
      400: never;
      /** @description 권한이 없습니다. */
      403: never;
    };
  };
  /** 모임 게시글 개수 조회 */
  getPostCount: {
    parameters: {
      query: {
        meetingId: number;
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["PostV2GetPostCountResponseDto"];
        };
      };
      /** @description 모임이 없습니다 */
      400: never;
    };
  };
  /**
   * 모임 지원자/참여자 조회
   * @description 모임 지원자/참여자 조회 (모임장이면 지원자, 아니면 참여자 조회)
   */
  findApplyList: {
    parameters: {
      query: {
        queryCommand: components["schemas"]["MeetingGetAppliesQueryDto"];
      };
      path: {
        meetingId: number;
      };
    };
    responses: {
      /** @description 모임 지원자/참여자 조회 성공 */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["MeetingGetApplyListResponseDto"];
        };
      };
      /** @description 모임이 없습니다. */
      400: never;
    };
  };
  /** 플레이그라운드 마이페이지 내 모임 정보 조회 */
  getAllMeetingByOrgUser: {
    parameters: {
      query?: {
        /**
         * @description 페이지, default = 1
         * @example 1
         */
        page?: string;
        /**
         * @description 가져올 데이터 개수, default = 12
         * @example 50
         */
        take?: string;
        /**
         * @description 플레이그라운드 유저 id
         * @example 0
         */
        orgUserId?: string;
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["MeetingV2GetAllMeetingByOrgUserDto"];
        };
      };
    };
  };
  /** 모임 둘러보기 조회 */
  getMeetingBanner: {
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["MeetingV2GetMeetingBannerResponseDto"][];
        };
      };
      /** @description 모임이 없습니다. */
      204: never;
    };
  };
  getHealth: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["HealthServiceGetHealthResponseDto"];
        };
      };
    };
  };
  getHealthV2: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json;charset=UTF-8": string;
        };
      };
    };
  };
  /** [TEMP] 모임 게시글 댓글 리스트 조회 */
  getCommentsTemp: {
    parameters: {
      query?: {
        /**
         * @description 페이지, default = 1
         * @example 1
         */
        page?: number;
        /**
         * @description 가져올 데이터 개수, default = 12
         * @example 50
         */
        take?: number;
        /**
         * @description 게시글 id
         * @example 3
         */
        postId?: number;
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["TempResponseDto"];
        };
      };
    };
  };
  /**
   * 광고 조회
   * @description 게시글 목록 페이지일 경우, ?category=POST  <br /> 모임 목록 페이지일 경우, ?category=MEETING
   */
  getAdvertisement: {
    parameters: {
      query: {
        category: "POST" | "MEETING";
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["AdvertisementGetResponseDto"];
        };
      };
    };
  };
  /** 모임 지원 취소 */
  applyMeetingCancel: {
    parameters: {
      path: {
        meetingId: number;
      };
    };
    responses: {
      /** @description 지원 취소 완료 */
      200: never;
      /** @description 존재하지 않는 모임 신청입니다. */
      400: never;
    };
  };
}
