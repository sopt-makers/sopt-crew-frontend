/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Ampli - A strong typed wrapper for your Analytics
 *
 * This file is generated by Amplitude.
 * To update run 'ampli pull web'
 *
 * Required dependencies: @amplitude/analytics-browser@^1.3.0
 * Tracking Plan Version: 2
 * Build: 1.0.0
 * Runtime: browser:typescript-ampli-v2
 *
 * [View Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest)
 *
 * [Full Setup Instructions](https://data.amplitude.com/sopt-makers/sopt-makers-crew/implementation/web)
 */

import * as amplitude from '@amplitude/analytics-browser';

export type Environment = 'default';

export const ApiKey: Record<Environment, string> = {
  default: '94650b2a33ffa5e8cc81b4ec3880730d'
};

/**
 * Default Amplitude configuration options. Contains tracking plan information.
 */
export const DefaultConfiguration: BrowserOptions = {
  plan: {
    version: '2',
    branch: 'main',
    source: 'web',
    versionId: 'e51ec5e2-7e99-4072-b0f6-530f6c5a6e9d'
  },
  ...{
    ingestionMetadata: {
      sourceName: 'browser-typescript-ampli',
      sourceVersion: '2.0.0'
    }
  }
};

export interface LoadOptionsBase { disabled?: boolean }

export type LoadOptionsWithEnvironment = LoadOptionsBase & { environment: Environment; client?: { configuration?: BrowserOptions; }; };
export type LoadOptionsWithApiKey = LoadOptionsBase & { client: { apiKey: string; configuration?: BrowserOptions; } };
export type LoadOptionsWithClientInstance = LoadOptionsBase & { client: { instance: BrowserClient; } };

export type LoadOptions = LoadOptionsWithEnvironment | LoadOptionsWithApiKey | LoadOptionsWithClientInstance;

export interface IdentifyProperties {
  /**
   * 유저의 알림 허용 여부
   */
  alarm_enabled?: boolean;
  /**
   * 유저의 최초 피드 댓글 작성 일자
   */
  first_feed_comment_date?: any;
  /**
   * 유저의 최초 피드 작성 일자
   */
  first_feed_posting_date?: any;
  /**
   * 유저의 최근 피드 댓글 작성 일자
   */
  last_feed_comment_date?: any;
  /**
   * 유저의 최근 피드 작성 일자
   */
  last_feed_posting_date?: any;
  /**
   * 유저의 최근 모임 상세 뷰 조회 일자
   */
  last_group_detail_session_date?: any;
  /**
   * 유저가 피드에 작성한 댓글의 개수
   */
  total_feed_comment?: string;
  /**
   * 유저가 포스팅한 피드의 개수
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  total_feed_posting?: number;
  /**
   * 유저가 소속된 모임의 개수 (개설 + 신청)
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  total_group?: number;
  /**
   * 유저가 개설한 모임의 개수
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  total_group_create?: number;
  /**
   * 유저가 신청 완료 후 승인된 모임의 개수
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  total_group_join?: number;
  /**
   * 유저의 고유 아이디 정보
   */
  user_id?: string;
}

export interface AttachFeedPhotoProperties {
  /**
   * 어떤 플랫폼으로 접속했는지를 의미합니다.
   */
  platform_type?: string;
  /**
   * 플레이그라운드 DB 기반 유저의 고유한 ID를 의미합니다.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  user_id?: number;
}

export interface ClickCarouselArrowProperties {
  /**
   * 모임 상세에 추가된 이미지의 총 개수를 의미합니다.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 1 |
   * | Max Value | 6 |
   */
  image_total?: number;
}

export interface ClickCommentLikeProperties {
  /**
   * 모임의 소속 구성원 여부를 의미합니다.
   */
  crew_status?: boolean;
}

export interface ClickFeedCardProperties {
  /**
   * 모임의 소속 구성원 여부를 의미합니다.
   */
  crew_status?: boolean;
  /**
   * 모임 피드에 작성된 댓글 및 대댓글 개수의 총합을 의미합니다.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  feed_comment_total?: number;
  /**
   * 모임 피드의 고유한 id값을 의미합니다.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  feed_id?: number;
  /**
   * 모임 피드에 첨부된 이미지 개수의 총합을 의미합니다.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  feed_image_total?: number;
  /**
   * 모임 피드에 클릭된 총 좋아요 개수의 총 합을 의미합니다.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  feed_like_total?: number;
  /**
   * 모임 피드의 제목을 의미합니다.
   */
  feed_title?: string;
  /**
   * 모임 피드를 업로드 완료한 시간을 의미합니다.
   */
  feed_upload?: any;
  /**
   * 모임의 id값을 의미합니다.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  group_id?: number;
  /**
   * 어떤 플랫폼으로 접속했는지를 의미합니다.
   */
  platform_type?: string;
}

export interface ClickFeeddatailImageProperties {
  /**
   * 모임의 소속 구성원 여부를 의미합니다.
   */
  crew_status?: boolean;
}

export interface ClickFeeddetailLikeProperties {
  /**
   * 모임의 소속 구성원 여부를 의미합니다.
   */
  crew_status?: boolean;
}

export interface ClickFeeddetatilProfileProperties {
  /**
   * 모임의 소속 구성원 여부를 의미합니다.
   */
  crew_status?: boolean;
}

export interface ClickFeedlistLikeProperties {
  /**
   * 모임의 소속 구성원 여부를 의미합니다.
   */
  crew_status?: boolean;
}

export interface ClickFeedPostingProperties {
  /**
   * 모임의 id값을 의미합니다.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  group_id?: number;
  /**
   * 플레이그라운드 DB 기반 유저의 고유한 ID를 의미합니다.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  user_id?: number;
}

export interface ClickFeedProfileProperties {
  /**
   * 모임의 소속 구성원 여부를 의미합니다.
   */
  crew_status?: boolean;
}

export interface ClickFilterCategoryProperties {
  /**
   * 모임 카테고리를 의미합니다.
   */
  group_category?: string;
}

export interface ClickFilterGenerationProperties {
  /**
   * 모임의 모집 대상이 활동기수인지 아닌지를 의미합니다.
   */
  group_generation?: boolean;
}

export interface ClickFilterOnProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Regex |  |
   */
  url?: string;
}

export interface ClickFilterPartProperties {
  /**
   * 모임의 모집 대상 파트를 의미합니다.
   */
  group_part?: string;
}

export interface ClickFilterStatusProperties {
  /**
   * 모임의 모집 상태를 의미합니다.
   */
  group_status?: string;
}

export interface ClickGroupCardProperties {
  /**
   * 모임의 소속 구성원 여부를 의미합니다.
   */
  crew_status?: boolean;
  /**
   * 모임 카테고리를 의미합니다.
   */
  group_category?: string;
  /**
   * 모임의 모집 대상이 활동기수인지 아닌지를 의미합니다.
   */
  group_generation?: boolean;
  /**
   * 모임의 id값을 의미합니다.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  group_id?: number;
  /**
   * 모임의 개설자 id값을 의미합니다.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  group_owner_id?: number;
  /**
   * 모임의 모집 대상 파트를 의미합니다.
   */
  group_part?: string;
  /**
   * 모임의 모집 상태를 의미합니다.
   */
  group_status?: string;
  /**
   * 모임의 이름을 의미합니다.
   */
  group_title?: string;
}

export interface ClickMakebymeGroupProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Regex |  |
   */
  url?: string;
}

export interface ClickMakeGroupProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Regex |  |
   */
  url?: string;
}

export interface ClickManagementListProfileProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Regex |  |
   */
  url?: string;
}

export interface ClickManagementListPromiseProperties {
  /**
   * 모임 신청 당시 다짐의 작성 여부를 의미합니다.
   */
  submit_promise?: boolean;
}

export interface ClickMemberManagementProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Regex |  |
   */
  url?: string;
}

export interface ClickMemberStatusProperties {
  /**
   * 모임의 소속 구성원 여부를 의미합니다.
   */
  crew_status?: boolean;
}

export interface ClickNavbarGroupProperties {
  /**
   * 모임 서비스 내의 탭 영역 메뉴명을 의미합니다.
   */
  menu: string;
}

export interface ClickNoticeOnProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Regex |  |
   */
  url?: string;
}

export interface ClickOwnerProfileProperties {
  /**
   * 모임의 개설자 id값을 의미합니다.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  group_owner_id?: number;
}

export interface ClickPagenationArrowProperties {
  /**
   * 모임 리스트 내 페이지를 의미합니다.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  page?: number;
}

export interface ClickPagenationNumberProperties {
  /**
   * 모임 리스트 내 페이지를 의미합니다.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  page?: number;
}

export interface ClickRegisteredGroupProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Regex |  |
   */
  url?: string;
}

export interface ClickRegisteredGroupCardProperties {
  /**
   * 모임 카테고리를 의미합니다.
   */
  group_category?: string;
  /**
   * 모임의 모집 대상이 활동기수인지 아닌지를 의미합니다.
   */
  group_generation?: boolean;
  /**
   * 모임의 id값을 의미합니다.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  group_id?: number;
  /**
   * 모임의 개설자 id값을 의미합니다.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  group_owner_id?: number;
  /**
   * 모임의 모집 대상 파트를 의미합니다.
   */
  group_part?: string;
  /**
   * 모임의 모집 상태를 의미합니다.
   */
  group_status?: string;
  /**
   * 모임의 이름을 의미합니다.
   */
  group_title?: string;
}

export interface ClickRegisterGroupProperties {
  /**
   * 플레이그라운드 DB 기반 유저의 고유한 ID를 의미합니다.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  user_id?: number;
}

export interface CompletedCommentPostingProperties {
  /**
   * 모임의 소속 구성원 여부를 의미합니다.
   */
  crew_status?: boolean;
  /**
   * 어떤 플랫폼으로 접속했는지를 의미합니다.
   */
  platform_type?: string;
  /**
   * 플레이그라운드 DB 기반 유저의 고유한 ID를 의미합니다.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  user_id?: number;
}

export interface CompletedFeedPostingProperties {
  /**
   * 모임 피드를 업로드 완료한 시간을 의미합니다.
   */
  feed_upload?: any;
  /**
   * 어떤 플랫폼으로 접속했는지를 의미합니다.
   */
  platform_type?: string;
  /**
   * 플레이그라운드 DB 기반 유저의 고유한 ID를 의미합니다.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  user_id?: number;
}

export interface CompletedFeedPostingCanceledProperties {
  /**
   * 어떤 플랫폼으로 접속했는지를 의미합니다.
   */
  platform_type?: string;
  /**
   * 플레이그라운드 DB 기반 유저의 고유한 ID를 의미합니다.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  user_id?: number;
}

export interface CompletedMakeGroupProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Regex |  |
   */
  url?: string;
}

export interface CompletedRegisterGroupProperties {
  /**
   * 모임 신청 당시 다짐의 작성 여부를 의미합니다.
   */
  submit_promise?: boolean;
  /**
   * 플레이그라운드 DB 기반 유저의 고유한 ID를 의미합니다.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  user_id?: number;
}

export interface FilterListOptionManagementProperties {
  /**
   * 모임 관리자의 모임 신청자 리스트 조회 옵션을 의미합니다.
   */
  manage_listing_no?: string;
}

export interface FilterManagementListOrderProperties {
  /**
   * 모임 관리자의 모임 신청자 리스트 정렬 옵션을 의미합니다.
   */
  manage_sort?: string;
}

export class Identify implements BaseEvent {
  event_type = amplitude.Types.SpecialEventType.IDENTIFY;

  constructor(
    public event_properties?: IdentifyProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class AttachFeedPhoto implements BaseEvent {
  event_type = 'Attach-feedPhoto';

  constructor(
    public event_properties?: AttachFeedPhotoProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickCarouselArrow implements BaseEvent {
  event_type = 'Click-carouselArrow';

  constructor(
    public event_properties?: ClickCarouselArrowProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickCommentLike implements BaseEvent {
  event_type = 'Click-commentLike';

  constructor(
    public event_properties?: ClickCommentLikeProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickFeedCard implements BaseEvent {
  event_type = 'Click-feedCard';

  constructor(
    public event_properties?: ClickFeedCardProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickFeeddatailImage implements BaseEvent {
  event_type = 'Click-feeddatailImage';

  constructor(
    public event_properties?: ClickFeeddatailImageProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickFeeddetailLike implements BaseEvent {
  event_type = 'Click-feeddetailLike';

  constructor(
    public event_properties?: ClickFeeddetailLikeProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickFeeddetatilProfile implements BaseEvent {
  event_type = 'Click-feeddetatilProfile';

  constructor(
    public event_properties?: ClickFeeddetatilProfileProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickFeedlistLike implements BaseEvent {
  event_type = 'Click-feedlistLike';

  constructor(
    public event_properties?: ClickFeedlistLikeProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickFeedPosting implements BaseEvent {
  event_type = 'Click-feedPosting';

  constructor(
    public event_properties?: ClickFeedPostingProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickFeedProfile implements BaseEvent {
  event_type = 'Click-feedProfile';

  constructor(
    public event_properties?: ClickFeedProfileProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickFilterCategory implements BaseEvent {
  event_type = 'Click-filterCategory';

  constructor(
    public event_properties?: ClickFilterCategoryProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickFilterGeneration implements BaseEvent {
  event_type = 'Click-filterGeneration';

  constructor(
    public event_properties?: ClickFilterGenerationProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickFilterOn implements BaseEvent {
  event_type = 'Click-filterOn';

  constructor(
    public event_properties?: ClickFilterOnProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickFilterPart implements BaseEvent {
  event_type = 'Click-filterPart';

  constructor(
    public event_properties?: ClickFilterPartProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickFilterStatus implements BaseEvent {
  event_type = 'Click-filterStatus';

  constructor(
    public event_properties?: ClickFilterStatusProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickGroupCard implements BaseEvent {
  event_type = 'Click-groupCard';

  constructor(
    public event_properties?: ClickGroupCardProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickMakebymeGroup implements BaseEvent {
  event_type = 'Click-makebymeGroup';

  constructor(
    public event_properties?: ClickMakebymeGroupProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickMakeGroup implements BaseEvent {
  event_type = 'Click-makeGroup';

  constructor(
    public event_properties?: ClickMakeGroupProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickManageGroup implements BaseEvent {
  event_type = 'Click-manageGroup';
}

export class ClickManagementListProfile implements BaseEvent {
  event_type = 'Click-managementListProfile';

  constructor(
    public event_properties?: ClickManagementListProfileProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickManagementListPromise implements BaseEvent {
  event_type = 'Click-managementListPromise';

  constructor(
    public event_properties?: ClickManagementListPromiseProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickMemberManagement implements BaseEvent {
  event_type = 'Click-memberManagement';

  constructor(
    public event_properties?: ClickMemberManagementProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickMemberStatus implements BaseEvent {
  event_type = 'Click-memberStatus';

  constructor(
    public event_properties?: ClickMemberStatusProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickNavbarGroup implements BaseEvent {
  event_type = 'Click-navbarGroup';

  constructor(
    public event_properties: ClickNavbarGroupProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickNoticeOn implements BaseEvent {
  event_type = 'Click-noticeOn';

  constructor(
    public event_properties?: ClickNoticeOnProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickOwnerProfile implements BaseEvent {
  event_type = 'Click-ownerProfile';

  constructor(
    public event_properties?: ClickOwnerProfileProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickPagenationArrow implements BaseEvent {
  event_type = 'Click-pagenationArrow';

  constructor(
    public event_properties?: ClickPagenationArrowProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickPagenationNumber implements BaseEvent {
  event_type = 'Click-pagenationNumber';

  constructor(
    public event_properties?: ClickPagenationNumberProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickRegisteredGroup implements BaseEvent {
  event_type = 'Click-registeredGroup';

  constructor(
    public event_properties?: ClickRegisteredGroupProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickRegisteredGroupCard implements BaseEvent {
  event_type = 'Click-registeredGroupCard';

  constructor(
    public event_properties?: ClickRegisteredGroupCardProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ClickRegisterGroup implements BaseEvent {
  event_type = 'Click-registerGroup';

  constructor(
    public event_properties?: ClickRegisterGroupProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class CompletedCommentPosting implements BaseEvent {
  event_type = 'Completed-commentPosting';

  constructor(
    public event_properties?: CompletedCommentPostingProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class CompletedFeedPosting implements BaseEvent {
  event_type = 'Completed-feedPosting';

  constructor(
    public event_properties?: CompletedFeedPostingProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class CompletedFeedPostingCanceled implements BaseEvent {
  event_type = 'Completed-feedPostingCanceled';

  constructor(
    public event_properties?: CompletedFeedPostingCanceledProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class CompletedMakeGroup implements BaseEvent {
  event_type = 'Completed-makeGroup';

  constructor(
    public event_properties?: CompletedMakeGroupProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class CompletedRegisterGroup implements BaseEvent {
  event_type = 'Completed-registerGroup';

  constructor(
    public event_properties?: CompletedRegisterGroupProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class FilterListOptionManagement implements BaseEvent {
  event_type = 'Filter-listOptionManagement';

  constructor(
    public event_properties?: FilterListOptionManagementProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class FilterManagementListOrder implements BaseEvent {
  event_type = 'Filter-managementListOrder';

  constructor(
    public event_properties?: FilterManagementListOrderProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export type PromiseResult<T> = { promise: Promise<T | void> };

const getVoidPromiseResult = () => ({ promise: Promise.resolve() });

// prettier-ignore
export class Ampli {
  private disabled: boolean = false;
  private amplitude?: BrowserClient;

  get client(): BrowserClient {
    this.isInitializedAndEnabled();
    return this.amplitude!;
  }

  get isLoaded(): boolean {
    return this.amplitude != null;
  }

  private isInitializedAndEnabled(): boolean {
    if (!this.amplitude) {
      console.error('ERROR: Ampli is not yet initialized. Have you called ampli.load() on app start?');
      return false;
    }
    return !this.disabled;
  }

  /**
   * Initialize the Ampli SDK. Call once when your application starts.
   *
   * @param options Configuration options to initialize the Ampli SDK with.
   */
  load(options: LoadOptions): PromiseResult<void> {
    this.disabled = options.disabled ?? false;

    if (this.amplitude) {
      console.warn('WARNING: Ampli is already intialized. Ampli.load() should be called once at application startup.');
      return getVoidPromiseResult();
    }

    let apiKey: string | null = null;
    if (options.client && 'apiKey' in options.client) {
      apiKey = options.client.apiKey;
    } else if ('environment' in options) {
      apiKey = ApiKey[options.environment];
    }

    if (options.client && 'instance' in options.client) {
      this.amplitude = options.client.instance;
    } else if (apiKey) {
      this.amplitude = amplitude.createInstance();
      const configuration = (options.client && 'configuration' in options.client) ? options.client.configuration : {};
      return this.amplitude.init(apiKey, undefined, { ...DefaultConfiguration, ...configuration });
    } else {
      console.error("ERROR: ampli.load() requires 'environment', 'client.apiKey', or 'client.instance'");
    }

    return getVoidPromiseResult();
  }

  /**
   * Identify a user and set user properties.
   *
   * @param userId The user's id.
   * @param properties The user properties.
   * @param options Optional event options.
   */
  identify(
    userId: string | undefined,
    properties?: IdentifyProperties,
    options?: EventOptions,
  ): PromiseResult<Result> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    if (userId) {
      options = {...options,  user_id: userId};
    }

    const amplitudeIdentify = new amplitude.Identify();
    const eventProperties = properties;
    if (eventProperties != null) {
      for (const [key, value] of Object.entries(eventProperties)) {
        amplitudeIdentify.set(key, value);
      }
    }
    return this.amplitude!.identify(
      amplitudeIdentify,
      options,
    );
  }

 /**
  * Flush the event.
  */
  flush() : PromiseResult<Result> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    return this.amplitude!.flush();
  }

  /**
   * Track event
   *
   * @param event The event to track.
   * @param options Optional event options.
   */
  track(event: Event, options?: EventOptions): PromiseResult<Result> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    return this.amplitude!.track(event, undefined, options);
  }

  /**
   * Attach-feedPhoto
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Attach-feedPhoto)
   *
   * 사진 첨부를 클릭하여 완료한 경우
   *
   * @param properties The event's properties (e.g. platform_type)
   * @param options Amplitude event options.
   */
  attachFeedPhoto(
    properties?: AttachFeedPhotoProperties,
    options?: EventOptions,
  ) {
    return this.track(new AttachFeedPhoto(properties), options);
  }

  /**
   * Click-carouselArrow
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-carouselArrow)
   *
   * 모임 상세 뷰 캐로셀 내 애로우 클릭
   *
   * @param properties The event's properties (e.g. image_total)
   * @param options Amplitude event options.
   */
  clickCarouselArrow(
    properties?: ClickCarouselArrowProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickCarouselArrow(properties), options);
  }

  /**
   * Click-commentLike
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-commentLike)
   *
   * 피드 댓글의 좋아요 클릭
   *
   * @param properties The event's properties (e.g. crew_status)
   * @param options Amplitude event options.
   */
  clickCommentLike(
    properties?: ClickCommentLikeProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickCommentLike(properties), options);
  }

  /**
   * Click-feedCard
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-feedCard)
   *
   * 피드 리스트에 포함된 카드 클릭
   *
   * @param properties The event's properties (e.g. crew_status)
   * @param options Amplitude event options.
   */
  clickFeedCard(
    properties?: ClickFeedCardProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickFeedCard(properties), options);
  }

  /**
   * Click-feeddatailImage
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-feeddatailImage)
   *
   * 피드 상세 뷰 내 이미지 클릭
   *
   * @param properties The event's properties (e.g. crew_status)
   * @param options Amplitude event options.
   */
  clickFeeddatailImage(
    properties?: ClickFeeddatailImageProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickFeeddatailImage(properties), options);
  }

  /**
   * Click-feeddetailLike
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-feeddetailLike)
   *
   * 피드 상세 뷰 내 좋아요 버튼 클릭
   *
   * @param properties The event's properties (e.g. crew_status)
   * @param options Amplitude event options.
   */
  clickFeeddetailLike(
    properties?: ClickFeeddetailLikeProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickFeeddetailLike(properties), options);
  }

  /**
   * Click-feeddetatilProfile
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-feeddetatilProfile)
   *
   * 피드 상세 뷰 내 작성자 프로필 영역 클릭
   *
   * @param properties The event's properties (e.g. crew_status)
   * @param options Amplitude event options.
   */
  clickFeeddetatilProfile(
    properties?: ClickFeeddetatilProfileProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickFeeddetatilProfile(properties), options);
  }

  /**
   * Click-feedlistLike
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-feedlistLike)
   *
   * 피드 리스트 뷰 내 카드에 포함된 좋아요 버튼 클릭
   *
   * @param properties The event's properties (e.g. crew_status)
   * @param options Amplitude event options.
   */
  clickFeedlistLike(
    properties?: ClickFeedlistLikeProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickFeedlistLike(properties), options);
  }

  /**
   * Click-feedPosting
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-feedPosting)
   *
   * \[피드 작성하기\] CTA 버튼 클릭
   *
   * @param properties The event's properties (e.g. group_id)
   * @param options Amplitude event options.
   */
  clickFeedPosting(
    properties?: ClickFeedPostingProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickFeedPosting(properties), options);
  }

  /**
   * Click-feedProfile
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-feedProfile)
   *
   * 피드 리스트 뷰 내 카드에 포함된 작성자 프로필 영역 클릭
   *
   * @param properties The event's properties (e.g. crew_status)
   * @param options Amplitude event options.
   */
  clickFeedProfile(
    properties?: ClickFeedProfileProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickFeedProfile(properties), options);
  }

  /**
   * Click-filterCategory
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-filterCategory)
   *
   * 필터 모달 내 카테고리 선택
   *
   * @param properties The event's properties (e.g. group_category)
   * @param options Amplitude event options.
   */
  clickFilterCategory(
    properties?: ClickFilterCategoryProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickFilterCategory(properties), options);
  }

  /**
   * Click-filterGeneration
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-filterGeneration)
   *
   * 필터 모달 내 대상 기수의 활동 기수만 옵션 선택 유무
   *
   * @param properties The event's properties (e.g. group_generation)
   * @param options Amplitude event options.
   */
  clickFilterGeneration(
    properties?: ClickFilterGenerationProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickFilterGeneration(properties), options);
  }

  /**
   * Click-filterOn
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-filterOn)
   *
   * \[필터\] 버튼 클릭
   *
   * @param properties The event's properties (e.g. url)
   * @param options Amplitude event options.
   */
  clickFilterOn(
    properties?: ClickFilterOnProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickFilterOn(properties), options);
  }

  /**
   * Click-filterPart
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-filterPart)
   *
   * 필터 모달 내 대상 파트 선택
   *
   * @param properties The event's properties (e.g. group_part)
   * @param options Amplitude event options.
   */
  clickFilterPart(
    properties?: ClickFilterPartProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickFilterPart(properties), options);
  }

  /**
   * Click-filterStatus
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-filterStatus)
   *
   * 필터 모달 내 모집 상태 선택
   *
   * @param properties The event's properties (e.g. group_status)
   * @param options Amplitude event options.
   */
  clickFilterStatus(
    properties?: ClickFilterStatusProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickFilterStatus(properties), options);
  }

  /**
   * Click-groupCard
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-groupCard)
   *
   * 전체 모임 리스트 내 모임 카드 클릭 유저의 모임 멤버 유무에 따른 방문 데이터 수집
   *
   * @param properties The event's properties (e.g. crew_status)
   * @param options Amplitude event options.
   */
  clickGroupCard(
    properties?: ClickGroupCardProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickGroupCard(properties), options);
  }

  /**
   * Click-makebymeGroup
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-makebymeGroup)
   *
   * \[내가 만든 모임\] 클릭
   *
   * @param properties The event's properties (e.g. url)
   * @param options Amplitude event options.
   */
  clickMakebymeGroup(
    properties?: ClickMakebymeGroupProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickMakebymeGroup(properties), options);
  }

  /**
   * Click-makeGroup
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-makeGroup)
   *
   * \[+모임 개설하기\] 버튼 클릭
   *
   * @param properties The event's properties (e.g. url)
   * @param options Amplitude event options.
   */
  clickMakeGroup(
    properties?: ClickMakeGroupProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickMakeGroup(properties), options);
  }

  /**
   * Click-manageGroup
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-manageGroup)
   *
   * \[신청자 관리\] 클릭
   *
   * @param options Amplitude event options.
   */
  clickManageGroup(
    options?: EventOptions,
  ) {
    return this.track(new ClickManageGroup(), options);
  }

  /**
   * Click-managementListProfile
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-managementListProfile)
   *
   * 리스트 내 프로필 클릭
   *
   * @param properties The event's properties (e.g. url)
   * @param options Amplitude event options.
   */
  clickManagementListProfile(
    properties?: ClickManagementListProfileProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickManagementListProfile(properties), options);
  }

  /**
   * Click-managementListPromise
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-managementListPromise)
   *
   * 리스트 내 신청내역 클릭 및 조회
   *
   * @param properties The event's properties (e.g. submit_promise)
   * @param options Amplitude event options.
   */
  clickManagementListPromise(
    properties?: ClickManagementListPromiseProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickManagementListPromise(properties), options);
  }

  /**
   * Click-memberManagement
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-memberManagement)
   *
   * 모임 상세 내 /management로 접근하는 버튼 클릭
   *
   * @param properties The event's properties (e.g. url)
   * @param options Amplitude event options.
   */
  clickMemberManagement(
    properties?: ClickMemberManagementProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickMemberManagement(properties), options);
  }

  /**
   * Click-memberStatus
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-memberStatus)
   *
   * 모집 현황 클릭
   *
   * @param properties The event's properties (e.g. crew_status)
   * @param options Amplitude event options.
   */
  clickMemberStatus(
    properties?: ClickMemberStatusProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickMemberStatus(properties), options);
  }

  /**
   * Click-navbarGroup
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-navbarGroup)
   *
   * \[전체 모임\] \[내 모임\] 메뉴 버튼 클릭
   *
   * @param properties The event's properties (e.g. menu)
   * @param options Amplitude event options.
   */
  clickNavbarGroup(
    properties: ClickNavbarGroupProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickNavbarGroup(properties), options);
  }

  /**
   * Click-noticeOn
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-noticeOn)
   *
   * 공지사항 토글 활성화 버튼 클릭
   *
   * @param properties The event's properties (e.g. url)
   * @param options Amplitude event options.
   */
  clickNoticeOn(
    properties?: ClickNoticeOnProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickNoticeOn(properties), options);
  }

  /**
   * Click-ownerProfile
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-ownerProfile)
   *
   * 모임 상세 내 개설자 프로필 클릭
   *
   * @param properties The event's properties (e.g. group_owner_id)
   * @param options Amplitude event options.
   */
  clickOwnerProfile(
    properties?: ClickOwnerProfileProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickOwnerProfile(properties), options);
  }

  /**
   * Click-pagenationArrow
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-pagenationArrow)
   *
   * 하단 페이지네이션 영역 중 애로우 클릭
   *
   * @param properties The event's properties (e.g. page)
   * @param options Amplitude event options.
   */
  clickPagenationArrow(
    properties?: ClickPagenationArrowProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickPagenationArrow(properties), options);
  }

  /**
   * Click-pagenationNumber
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-pagenationNumber)
   *
   * 하단 페이지네이션 영역 중 페이지 클릭
   *
   * @param properties The event's properties (e.g. page)
   * @param options Amplitude event options.
   */
  clickPagenationNumber(
    properties?: ClickPagenationNumberProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickPagenationNumber(properties), options);
  }

  /**
   * Click-registeredGroup
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-registeredGroup)
   *
   * \[내가 신청한 모임\] 클릭
   *
   * @param properties The event's properties (e.g. url)
   * @param options Amplitude event options.
   */
  clickRegisteredGroup(
    properties?: ClickRegisteredGroupProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickRegisteredGroup(properties), options);
  }

  /**
   * Click-registeredGroupCard
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-registeredGroupCard)
   *
   * 내가 신청한 모임의 모임 카드 클릭
   *
   * @param properties The event's properties (e.g. group_category)
   * @param options Amplitude event options.
   */
  clickRegisteredGroupCard(
    properties?: ClickRegisteredGroupCardProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickRegisteredGroupCard(properties), options);
  }

  /**
   * Click-registerGroup
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Click-registerGroup)
   *
   * \[신청하기\] 버튼 클릭
   *
   * @param properties The event's properties (e.g. user_id)
   * @param options Amplitude event options.
   */
  clickRegisterGroup(
    properties?: ClickRegisterGroupProperties,
    options?: EventOptions,
  ) {
    return this.track(new ClickRegisterGroup(properties), options);
  }

  /**
   * Completed-commentPosting
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Completed-commentPosting)
   *
   * 피드 댓글 포스팅 완료
   *
   * @param properties The event's properties (e.g. crew_status)
   * @param options Amplitude event options.
   */
  completedCommentPosting(
    properties?: CompletedCommentPostingProperties,
    options?: EventOptions,
  ) {
    return this.track(new CompletedCommentPosting(properties), options);
  }

  /**
   * Completed-feedPosting
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Completed-feedPosting)
   *
   * 피드 작성을 완료한 후 포스팅까지 마친 경우
   *
   * @param properties The event's properties (e.g. feed_upload)
   * @param options Amplitude event options.
   */
  completedFeedPosting(
    properties?: CompletedFeedPostingProperties,
    options?: EventOptions,
  ) {
    return this.track(new CompletedFeedPosting(properties), options);
  }

  /**
   * Completed-feedPostingCanceled
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Completed-feedPostingCanceled)
   *
   * 피드 작성 중 이탈한 경우
   *
   * @param properties The event's properties (e.g. platform_type)
   * @param options Amplitude event options.
   */
  completedFeedPostingCanceled(
    properties?: CompletedFeedPostingCanceledProperties,
    options?: EventOptions,
  ) {
    return this.track(new CompletedFeedPostingCanceled(properties), options);
  }

  /**
   * Completed-makeGroup
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Completed-makeGroup)
   *
   * 모임 개설이 완료된 케이스
   *
   * @param properties The event's properties (e.g. url)
   * @param options Amplitude event options.
   */
  completedMakeGroup(
    properties?: CompletedMakeGroupProperties,
    options?: EventOptions,
  ) {
    return this.track(new CompletedMakeGroup(properties), options);
  }

  /**
   * Completed-registerGroup
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Completed-registerGroup)
   *
   * 모임 신청하기 모달 내 \[신청하기\] 버튼 클릭
   *
   * @param properties The event's properties (e.g. submit_promise)
   * @param options Amplitude event options.
   */
  completedRegisterGroup(
    properties?: CompletedRegisterGroupProperties,
    options?: EventOptions,
  ) {
    return this.track(new CompletedRegisterGroup(properties), options);
  }

  /**
   * Filter-listOptionManagement
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Filter-listOptionManagement)
   *
   * 리스트 뷰에서 몇명까지 볼 것인지 선택한 옵션
   *
   * @param properties The event's properties (e.g. manage_listing_no)
   * @param options Amplitude event options.
   */
  filterListOptionManagement(
    properties?: FilterListOptionManagementProperties,
    options?: EventOptions,
  ) {
    return this.track(new FilterListOptionManagement(properties), options);
  }

  /**
   * Filter-managementListOrder
   *
   * [View in Tracking Plan](https://data.amplitude.com/sopt-makers/sopt-makers-crew/events/main/latest/Filter-managementListOrder)
   *
   * 최신순 ↔ 오래된순
   *
   * @param properties The event's properties (e.g. manage_sort)
   * @param options Amplitude event options.
   */
  filterManagementListOrder(
    properties?: FilterManagementListOrderProperties,
    options?: EventOptions,
  ) {
    return this.track(new FilterManagementListOrder(properties), options);
  }
}

export const ampli = new Ampli();

// BASE TYPES
type BrowserOptions = amplitude.Types.BrowserOptions;

export type BrowserClient = amplitude.Types.BrowserClient;
export type BaseEvent = amplitude.Types.BaseEvent;
export type IdentifyEvent = amplitude.Types.IdentifyEvent;
export type GroupEvent = amplitude.Types.GroupIdentifyEvent;
export type Event = amplitude.Types.Event;
export type EventOptions = amplitude.Types.EventOptions;
export type Result = amplitude.Types.Result;
